// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Okta.Deprecated
{
    public partial class MfaPolicy : Pulumi.CustomResource
    {
        /// <summary>
        /// Policy Description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("duo")]
        public Output<Outputs.MfaPolicyDuo?> Duo { get; private set; } = null!;

        [Output("fidoU2f")]
        public Output<Outputs.MfaPolicyFidoU2f?> FidoU2f { get; private set; } = null!;

        [Output("fidoWebauthn")]
        public Output<Outputs.MfaPolicyFidoWebauthn?> FidoWebauthn { get; private set; } = null!;

        [Output("googleOtp")]
        public Output<Outputs.MfaPolicyGoogleOtp?> GoogleOtp { get; private set; } = null!;

        /// <summary>
        /// List of Group IDs to Include
        /// </summary>
        [Output("groupsIncludeds")]
        public Output<ImmutableArray<string>> GroupsIncludeds { get; private set; } = null!;

        /// <summary>
        /// Policy Name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("oktaCall")]
        public Output<Outputs.MfaPolicyOktaCall?> OktaCall { get; private set; } = null!;

        [Output("oktaOtp")]
        public Output<Outputs.MfaPolicyOktaOtp?> OktaOtp { get; private set; } = null!;

        [Output("oktaPassword")]
        public Output<Outputs.MfaPolicyOktaPassword?> OktaPassword { get; private set; } = null!;

        [Output("oktaPush")]
        public Output<Outputs.MfaPolicyOktaPush?> OktaPush { get; private set; } = null!;

        [Output("oktaQuestion")]
        public Output<Outputs.MfaPolicyOktaQuestion?> OktaQuestion { get; private set; } = null!;

        [Output("oktaSms")]
        public Output<Outputs.MfaPolicyOktaSms?> OktaSms { get; private set; } = null!;

        /// <summary>
        /// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if
        /// an invalid priority is provided. API defaults it to the last/lowest if not there.
        /// </summary>
        [Output("priority")]
        public Output<int?> Priority { get; private set; } = null!;

        [Output("rsaToken")]
        public Output<Outputs.MfaPolicyRsaToken?> RsaToken { get; private set; } = null!;

        /// <summary>
        /// Policy Status: ACTIVE or INACTIVE.
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        [Output("symantecVip")]
        public Output<Outputs.MfaPolicySymantecVip?> SymantecVip { get; private set; } = null!;

        [Output("yubikeyToken")]
        public Output<Outputs.MfaPolicyYubikeyToken?> YubikeyToken { get; private set; } = null!;


        /// <summary>
        /// Create a MfaPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MfaPolicy(string name, MfaPolicyArgs? args = null, CustomResourceOptions? options = null)
            : base("okta:deprecated/mfaPolicy:MfaPolicy", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private MfaPolicy(string name, Input<string> id, MfaPolicyState? state = null, CustomResourceOptions? options = null)
            : base("okta:deprecated/mfaPolicy:MfaPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MfaPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MfaPolicy Get(string name, Input<string> id, MfaPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new MfaPolicy(name, id, state, options);
        }
    }

    public sealed class MfaPolicyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Policy Description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("duo")]
        public Input<Inputs.MfaPolicyDuoArgs>? Duo { get; set; }

        [Input("fidoU2f")]
        public Input<Inputs.MfaPolicyFidoU2fArgs>? FidoU2f { get; set; }

        [Input("fidoWebauthn")]
        public Input<Inputs.MfaPolicyFidoWebauthnArgs>? FidoWebauthn { get; set; }

        [Input("googleOtp")]
        public Input<Inputs.MfaPolicyGoogleOtpArgs>? GoogleOtp { get; set; }

        [Input("groupsIncludeds")]
        private InputList<string>? _groupsIncludeds;

        /// <summary>
        /// List of Group IDs to Include
        /// </summary>
        public InputList<string> GroupsIncludeds
        {
            get => _groupsIncludeds ?? (_groupsIncludeds = new InputList<string>());
            set => _groupsIncludeds = value;
        }

        /// <summary>
        /// Policy Name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("oktaCall")]
        public Input<Inputs.MfaPolicyOktaCallArgs>? OktaCall { get; set; }

        [Input("oktaOtp")]
        public Input<Inputs.MfaPolicyOktaOtpArgs>? OktaOtp { get; set; }

        [Input("oktaPassword")]
        public Input<Inputs.MfaPolicyOktaPasswordArgs>? OktaPassword { get; set; }

        [Input("oktaPush")]
        public Input<Inputs.MfaPolicyOktaPushArgs>? OktaPush { get; set; }

        [Input("oktaQuestion")]
        public Input<Inputs.MfaPolicyOktaQuestionArgs>? OktaQuestion { get; set; }

        [Input("oktaSms")]
        public Input<Inputs.MfaPolicyOktaSmsArgs>? OktaSms { get; set; }

        /// <summary>
        /// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if
        /// an invalid priority is provided. API defaults it to the last/lowest if not there.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        [Input("rsaToken")]
        public Input<Inputs.MfaPolicyRsaTokenArgs>? RsaToken { get; set; }

        /// <summary>
        /// Policy Status: ACTIVE or INACTIVE.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("symantecVip")]
        public Input<Inputs.MfaPolicySymantecVipArgs>? SymantecVip { get; set; }

        [Input("yubikeyToken")]
        public Input<Inputs.MfaPolicyYubikeyTokenArgs>? YubikeyToken { get; set; }

        public MfaPolicyArgs()
        {
        }
    }

    public sealed class MfaPolicyState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Policy Description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("duo")]
        public Input<Inputs.MfaPolicyDuoGetArgs>? Duo { get; set; }

        [Input("fidoU2f")]
        public Input<Inputs.MfaPolicyFidoU2fGetArgs>? FidoU2f { get; set; }

        [Input("fidoWebauthn")]
        public Input<Inputs.MfaPolicyFidoWebauthnGetArgs>? FidoWebauthn { get; set; }

        [Input("googleOtp")]
        public Input<Inputs.MfaPolicyGoogleOtpGetArgs>? GoogleOtp { get; set; }

        [Input("groupsIncludeds")]
        private InputList<string>? _groupsIncludeds;

        /// <summary>
        /// List of Group IDs to Include
        /// </summary>
        public InputList<string> GroupsIncludeds
        {
            get => _groupsIncludeds ?? (_groupsIncludeds = new InputList<string>());
            set => _groupsIncludeds = value;
        }

        /// <summary>
        /// Policy Name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("oktaCall")]
        public Input<Inputs.MfaPolicyOktaCallGetArgs>? OktaCall { get; set; }

        [Input("oktaOtp")]
        public Input<Inputs.MfaPolicyOktaOtpGetArgs>? OktaOtp { get; set; }

        [Input("oktaPassword")]
        public Input<Inputs.MfaPolicyOktaPasswordGetArgs>? OktaPassword { get; set; }

        [Input("oktaPush")]
        public Input<Inputs.MfaPolicyOktaPushGetArgs>? OktaPush { get; set; }

        [Input("oktaQuestion")]
        public Input<Inputs.MfaPolicyOktaQuestionGetArgs>? OktaQuestion { get; set; }

        [Input("oktaSms")]
        public Input<Inputs.MfaPolicyOktaSmsGetArgs>? OktaSms { get; set; }

        /// <summary>
        /// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if
        /// an invalid priority is provided. API defaults it to the last/lowest if not there.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        [Input("rsaToken")]
        public Input<Inputs.MfaPolicyRsaTokenGetArgs>? RsaToken { get; set; }

        /// <summary>
        /// Policy Status: ACTIVE or INACTIVE.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("symantecVip")]
        public Input<Inputs.MfaPolicySymantecVipGetArgs>? SymantecVip { get; set; }

        [Input("yubikeyToken")]
        public Input<Inputs.MfaPolicyYubikeyTokenGetArgs>? YubikeyToken { get; set; }

        public MfaPolicyState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class MfaPolicyDuoArgs : Pulumi.ResourceArgs
    {
        [Input("consentType")]
        public Input<string>? ConsentType { get; set; }

        [Input("enroll")]
        public Input<string>? Enroll { get; set; }

        public MfaPolicyDuoArgs()
        {
        }
    }

    public sealed class MfaPolicyDuoGetArgs : Pulumi.ResourceArgs
    {
        [Input("consentType")]
        public Input<string>? ConsentType { get; set; }

        [Input("enroll")]
        public Input<string>? Enroll { get; set; }

        public MfaPolicyDuoGetArgs()
        {
        }
    }

    public sealed class MfaPolicyFidoU2fArgs : Pulumi.ResourceArgs
    {
        [Input("consentType")]
        public Input<string>? ConsentType { get; set; }

        [Input("enroll")]
        public Input<string>? Enroll { get; set; }

        public MfaPolicyFidoU2fArgs()
        {
        }
    }

    public sealed class MfaPolicyFidoU2fGetArgs : Pulumi.ResourceArgs
    {
        [Input("consentType")]
        public Input<string>? ConsentType { get; set; }

        [Input("enroll")]
        public Input<string>? Enroll { get; set; }

        public MfaPolicyFidoU2fGetArgs()
        {
        }
    }

    public sealed class MfaPolicyFidoWebauthnArgs : Pulumi.ResourceArgs
    {
        [Input("consentType")]
        public Input<string>? ConsentType { get; set; }

        [Input("enroll")]
        public Input<string>? Enroll { get; set; }

        public MfaPolicyFidoWebauthnArgs()
        {
        }
    }

    public sealed class MfaPolicyFidoWebauthnGetArgs : Pulumi.ResourceArgs
    {
        [Input("consentType")]
        public Input<string>? ConsentType { get; set; }

        [Input("enroll")]
        public Input<string>? Enroll { get; set; }

        public MfaPolicyFidoWebauthnGetArgs()
        {
        }
    }

    public sealed class MfaPolicyGoogleOtpArgs : Pulumi.ResourceArgs
    {
        [Input("consentType")]
        public Input<string>? ConsentType { get; set; }

        [Input("enroll")]
        public Input<string>? Enroll { get; set; }

        public MfaPolicyGoogleOtpArgs()
        {
        }
    }

    public sealed class MfaPolicyGoogleOtpGetArgs : Pulumi.ResourceArgs
    {
        [Input("consentType")]
        public Input<string>? ConsentType { get; set; }

        [Input("enroll")]
        public Input<string>? Enroll { get; set; }

        public MfaPolicyGoogleOtpGetArgs()
        {
        }
    }

    public sealed class MfaPolicyOktaCallArgs : Pulumi.ResourceArgs
    {
        [Input("consentType")]
        public Input<string>? ConsentType { get; set; }

        [Input("enroll")]
        public Input<string>? Enroll { get; set; }

        public MfaPolicyOktaCallArgs()
        {
        }
    }

    public sealed class MfaPolicyOktaCallGetArgs : Pulumi.ResourceArgs
    {
        [Input("consentType")]
        public Input<string>? ConsentType { get; set; }

        [Input("enroll")]
        public Input<string>? Enroll { get; set; }

        public MfaPolicyOktaCallGetArgs()
        {
        }
    }

    public sealed class MfaPolicyOktaOtpArgs : Pulumi.ResourceArgs
    {
        [Input("consentType")]
        public Input<string>? ConsentType { get; set; }

        [Input("enroll")]
        public Input<string>? Enroll { get; set; }

        public MfaPolicyOktaOtpArgs()
        {
        }
    }

    public sealed class MfaPolicyOktaOtpGetArgs : Pulumi.ResourceArgs
    {
        [Input("consentType")]
        public Input<string>? ConsentType { get; set; }

        [Input("enroll")]
        public Input<string>? Enroll { get; set; }

        public MfaPolicyOktaOtpGetArgs()
        {
        }
    }

    public sealed class MfaPolicyOktaPasswordArgs : Pulumi.ResourceArgs
    {
        [Input("consentType")]
        public Input<string>? ConsentType { get; set; }

        [Input("enroll")]
        public Input<string>? Enroll { get; set; }

        public MfaPolicyOktaPasswordArgs()
        {
        }
    }

    public sealed class MfaPolicyOktaPasswordGetArgs : Pulumi.ResourceArgs
    {
        [Input("consentType")]
        public Input<string>? ConsentType { get; set; }

        [Input("enroll")]
        public Input<string>? Enroll { get; set; }

        public MfaPolicyOktaPasswordGetArgs()
        {
        }
    }

    public sealed class MfaPolicyOktaPushArgs : Pulumi.ResourceArgs
    {
        [Input("consentType")]
        public Input<string>? ConsentType { get; set; }

        [Input("enroll")]
        public Input<string>? Enroll { get; set; }

        public MfaPolicyOktaPushArgs()
        {
        }
    }

    public sealed class MfaPolicyOktaPushGetArgs : Pulumi.ResourceArgs
    {
        [Input("consentType")]
        public Input<string>? ConsentType { get; set; }

        [Input("enroll")]
        public Input<string>? Enroll { get; set; }

        public MfaPolicyOktaPushGetArgs()
        {
        }
    }

    public sealed class MfaPolicyOktaQuestionArgs : Pulumi.ResourceArgs
    {
        [Input("consentType")]
        public Input<string>? ConsentType { get; set; }

        [Input("enroll")]
        public Input<string>? Enroll { get; set; }

        public MfaPolicyOktaQuestionArgs()
        {
        }
    }

    public sealed class MfaPolicyOktaQuestionGetArgs : Pulumi.ResourceArgs
    {
        [Input("consentType")]
        public Input<string>? ConsentType { get; set; }

        [Input("enroll")]
        public Input<string>? Enroll { get; set; }

        public MfaPolicyOktaQuestionGetArgs()
        {
        }
    }

    public sealed class MfaPolicyOktaSmsArgs : Pulumi.ResourceArgs
    {
        [Input("consentType")]
        public Input<string>? ConsentType { get; set; }

        [Input("enroll")]
        public Input<string>? Enroll { get; set; }

        public MfaPolicyOktaSmsArgs()
        {
        }
    }

    public sealed class MfaPolicyOktaSmsGetArgs : Pulumi.ResourceArgs
    {
        [Input("consentType")]
        public Input<string>? ConsentType { get; set; }

        [Input("enroll")]
        public Input<string>? Enroll { get; set; }

        public MfaPolicyOktaSmsGetArgs()
        {
        }
    }

    public sealed class MfaPolicyRsaTokenArgs : Pulumi.ResourceArgs
    {
        [Input("consentType")]
        public Input<string>? ConsentType { get; set; }

        [Input("enroll")]
        public Input<string>? Enroll { get; set; }

        public MfaPolicyRsaTokenArgs()
        {
        }
    }

    public sealed class MfaPolicyRsaTokenGetArgs : Pulumi.ResourceArgs
    {
        [Input("consentType")]
        public Input<string>? ConsentType { get; set; }

        [Input("enroll")]
        public Input<string>? Enroll { get; set; }

        public MfaPolicyRsaTokenGetArgs()
        {
        }
    }

    public sealed class MfaPolicySymantecVipArgs : Pulumi.ResourceArgs
    {
        [Input("consentType")]
        public Input<string>? ConsentType { get; set; }

        [Input("enroll")]
        public Input<string>? Enroll { get; set; }

        public MfaPolicySymantecVipArgs()
        {
        }
    }

    public sealed class MfaPolicySymantecVipGetArgs : Pulumi.ResourceArgs
    {
        [Input("consentType")]
        public Input<string>? ConsentType { get; set; }

        [Input("enroll")]
        public Input<string>? Enroll { get; set; }

        public MfaPolicySymantecVipGetArgs()
        {
        }
    }

    public sealed class MfaPolicyYubikeyTokenArgs : Pulumi.ResourceArgs
    {
        [Input("consentType")]
        public Input<string>? ConsentType { get; set; }

        [Input("enroll")]
        public Input<string>? Enroll { get; set; }

        public MfaPolicyYubikeyTokenArgs()
        {
        }
    }

    public sealed class MfaPolicyYubikeyTokenGetArgs : Pulumi.ResourceArgs
    {
        [Input("consentType")]
        public Input<string>? ConsentType { get; set; }

        [Input("enroll")]
        public Input<string>? Enroll { get; set; }

        public MfaPolicyYubikeyTokenGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class MfaPolicyDuo
    {
        public readonly string? ConsentType;
        public readonly string? Enroll;

        [OutputConstructor]
        private MfaPolicyDuo(
            string? consentType,
            string? enroll)
        {
            ConsentType = consentType;
            Enroll = enroll;
        }
    }

    [OutputType]
    public sealed class MfaPolicyFidoU2f
    {
        public readonly string? ConsentType;
        public readonly string? Enroll;

        [OutputConstructor]
        private MfaPolicyFidoU2f(
            string? consentType,
            string? enroll)
        {
            ConsentType = consentType;
            Enroll = enroll;
        }
    }

    [OutputType]
    public sealed class MfaPolicyFidoWebauthn
    {
        public readonly string? ConsentType;
        public readonly string? Enroll;

        [OutputConstructor]
        private MfaPolicyFidoWebauthn(
            string? consentType,
            string? enroll)
        {
            ConsentType = consentType;
            Enroll = enroll;
        }
    }

    [OutputType]
    public sealed class MfaPolicyGoogleOtp
    {
        public readonly string? ConsentType;
        public readonly string? Enroll;

        [OutputConstructor]
        private MfaPolicyGoogleOtp(
            string? consentType,
            string? enroll)
        {
            ConsentType = consentType;
            Enroll = enroll;
        }
    }

    [OutputType]
    public sealed class MfaPolicyOktaCall
    {
        public readonly string? ConsentType;
        public readonly string? Enroll;

        [OutputConstructor]
        private MfaPolicyOktaCall(
            string? consentType,
            string? enroll)
        {
            ConsentType = consentType;
            Enroll = enroll;
        }
    }

    [OutputType]
    public sealed class MfaPolicyOktaOtp
    {
        public readonly string? ConsentType;
        public readonly string? Enroll;

        [OutputConstructor]
        private MfaPolicyOktaOtp(
            string? consentType,
            string? enroll)
        {
            ConsentType = consentType;
            Enroll = enroll;
        }
    }

    [OutputType]
    public sealed class MfaPolicyOktaPassword
    {
        public readonly string? ConsentType;
        public readonly string? Enroll;

        [OutputConstructor]
        private MfaPolicyOktaPassword(
            string? consentType,
            string? enroll)
        {
            ConsentType = consentType;
            Enroll = enroll;
        }
    }

    [OutputType]
    public sealed class MfaPolicyOktaPush
    {
        public readonly string? ConsentType;
        public readonly string? Enroll;

        [OutputConstructor]
        private MfaPolicyOktaPush(
            string? consentType,
            string? enroll)
        {
            ConsentType = consentType;
            Enroll = enroll;
        }
    }

    [OutputType]
    public sealed class MfaPolicyOktaQuestion
    {
        public readonly string? ConsentType;
        public readonly string? Enroll;

        [OutputConstructor]
        private MfaPolicyOktaQuestion(
            string? consentType,
            string? enroll)
        {
            ConsentType = consentType;
            Enroll = enroll;
        }
    }

    [OutputType]
    public sealed class MfaPolicyOktaSms
    {
        public readonly string? ConsentType;
        public readonly string? Enroll;

        [OutputConstructor]
        private MfaPolicyOktaSms(
            string? consentType,
            string? enroll)
        {
            ConsentType = consentType;
            Enroll = enroll;
        }
    }

    [OutputType]
    public sealed class MfaPolicyRsaToken
    {
        public readonly string? ConsentType;
        public readonly string? Enroll;

        [OutputConstructor]
        private MfaPolicyRsaToken(
            string? consentType,
            string? enroll)
        {
            ConsentType = consentType;
            Enroll = enroll;
        }
    }

    [OutputType]
    public sealed class MfaPolicySymantecVip
    {
        public readonly string? ConsentType;
        public readonly string? Enroll;

        [OutputConstructor]
        private MfaPolicySymantecVip(
            string? consentType,
            string? enroll)
        {
            ConsentType = consentType;
            Enroll = enroll;
        }
    }

    [OutputType]
    public sealed class MfaPolicyYubikeyToken
    {
        public readonly string? ConsentType;
        public readonly string? Enroll;

        [OutputConstructor]
        private MfaPolicyYubikeyToken(
            string? consentType,
            string? enroll)
        {
            ConsentType = consentType;
            Enroll = enroll;
        }
    }
    }
}
