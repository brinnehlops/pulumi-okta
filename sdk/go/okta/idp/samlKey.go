// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package idp

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates a SAML Identity Provider Signing Key.
// 
// This resource allows you to create and configure a SAML Identity Provider Signing Key.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-okta/blob/master/website/docs/r/idp_saml_key.html.markdown.
type SamlKey struct {
	s *pulumi.ResourceState
}

// NewSamlKey registers a new resource with the given unique name, arguments, and options.
func NewSamlKey(ctx *pulumi.Context,
	name string, args *SamlKeyArgs, opts ...pulumi.ResourceOpt) (*SamlKey, error) {
	if args == nil || args.X5cs == nil {
		return nil, errors.New("missing required argument 'X5cs'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["x5cs"] = nil
	} else {
		inputs["x5cs"] = args.X5cs
	}
	inputs["created"] = nil
	inputs["expiresAt"] = nil
	inputs["kid"] = nil
	inputs["kty"] = nil
	inputs["use"] = nil
	inputs["x5tS256"] = nil
	s, err := ctx.RegisterResource("okta:idp/samlKey:SamlKey", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SamlKey{s: s}, nil
}

// GetSamlKey gets an existing SamlKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSamlKey(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SamlKeyState, opts ...pulumi.ResourceOpt) (*SamlKey, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["created"] = state.Created
		inputs["expiresAt"] = state.ExpiresAt
		inputs["kid"] = state.Kid
		inputs["kty"] = state.Kty
		inputs["use"] = state.Use
		inputs["x5cs"] = state.X5cs
		inputs["x5tS256"] = state.X5tS256
	}
	s, err := ctx.ReadResource("okta:idp/samlKey:SamlKey", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SamlKey{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SamlKey) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SamlKey) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Date created.
func (r *SamlKey) Created() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["created"])
}

// Date the cert expires.
func (r *SamlKey) ExpiresAt() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["expiresAt"])
}

// Key ID.
func (r *SamlKey) Kid() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["kid"])
}

// Identifies the cryptographic algorithm family used with the key.
func (r *SamlKey) Kty() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["kty"])
}

// Intended use of the public key.
func (r *SamlKey) Use() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["use"])
}

// base64-encoded X.509 certificate chain with DER encoding.
func (r *SamlKey) X5cs() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["x5cs"])
}

// base64url-encoded SHA-256 thumbprint of the DER encoding of an X.509 certificate.
func (r *SamlKey) X5tS256() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["x5tS256"])
}

// Input properties used for looking up and filtering SamlKey resources.
type SamlKeyState struct {
	// Date created.
	Created interface{}
	// Date the cert expires.
	ExpiresAt interface{}
	// Key ID.
	Kid interface{}
	// Identifies the cryptographic algorithm family used with the key.
	Kty interface{}
	// Intended use of the public key.
	Use interface{}
	// base64-encoded X.509 certificate chain with DER encoding.
	X5cs interface{}
	// base64url-encoded SHA-256 thumbprint of the DER encoding of an X.509 certificate.
	X5tS256 interface{}
}

// The set of arguments for constructing a SamlKey resource.
type SamlKeyArgs struct {
	// base64-encoded X.509 certificate chain with DER encoding.
	X5cs interface{}
}
