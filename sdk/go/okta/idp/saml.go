// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package idp

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates a SAML Identity Provider.
// 
// This resource allows you to create and configure a SAML Identity Provider.
//
// > This content is derived from https://github.com/articulate/terraform-provider-okta/blob/master/website/docs/r/idp_saml.html.markdown.
type Saml struct {
	s *pulumi.ResourceState
}

// NewSaml registers a new resource with the given unique name, arguments, and options.
func NewSaml(ctx *pulumi.Context,
	name string, args *SamlArgs, opts ...pulumi.ResourceOpt) (*Saml, error) {
	if args == nil || args.AcsBinding == nil {
		return nil, errors.New("missing required argument 'AcsBinding'")
	}
	if args == nil || args.Issuer == nil {
		return nil, errors.New("missing required argument 'Issuer'")
	}
	if args == nil || args.Kid == nil {
		return nil, errors.New("missing required argument 'Kid'")
	}
	if args == nil || args.SsoUrl == nil {
		return nil, errors.New("missing required argument 'SsoUrl'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accountLinkAction"] = nil
		inputs["accountLinkGroupIncludes"] = nil
		inputs["acsBinding"] = nil
		inputs["acsType"] = nil
		inputs["deprovisionedAction"] = nil
		inputs["groupsAction"] = nil
		inputs["groupsAssignments"] = nil
		inputs["groupsAttribute"] = nil
		inputs["groupsFilters"] = nil
		inputs["issuer"] = nil
		inputs["issuerMode"] = nil
		inputs["kid"] = nil
		inputs["name"] = nil
		inputs["nameFormat"] = nil
		inputs["profileMaster"] = nil
		inputs["provisioningAction"] = nil
		inputs["requestSignatureAlgorithm"] = nil
		inputs["requestSignatureScope"] = nil
		inputs["responseSignatureAlgorithm"] = nil
		inputs["responseSignatureScope"] = nil
		inputs["ssoBinding"] = nil
		inputs["ssoDestination"] = nil
		inputs["ssoUrl"] = nil
		inputs["status"] = nil
		inputs["subjectFilter"] = nil
		inputs["subjectFormats"] = nil
		inputs["subjectMatchAttribute"] = nil
		inputs["subjectMatchType"] = nil
		inputs["suspendedAction"] = nil
		inputs["usernameTemplate"] = nil
	} else {
		inputs["accountLinkAction"] = args.AccountLinkAction
		inputs["accountLinkGroupIncludes"] = args.AccountLinkGroupIncludes
		inputs["acsBinding"] = args.AcsBinding
		inputs["acsType"] = args.AcsType
		inputs["deprovisionedAction"] = args.DeprovisionedAction
		inputs["groupsAction"] = args.GroupsAction
		inputs["groupsAssignments"] = args.GroupsAssignments
		inputs["groupsAttribute"] = args.GroupsAttribute
		inputs["groupsFilters"] = args.GroupsFilters
		inputs["issuer"] = args.Issuer
		inputs["issuerMode"] = args.IssuerMode
		inputs["kid"] = args.Kid
		inputs["name"] = args.Name
		inputs["nameFormat"] = args.NameFormat
		inputs["profileMaster"] = args.ProfileMaster
		inputs["provisioningAction"] = args.ProvisioningAction
		inputs["requestSignatureAlgorithm"] = args.RequestSignatureAlgorithm
		inputs["requestSignatureScope"] = args.RequestSignatureScope
		inputs["responseSignatureAlgorithm"] = args.ResponseSignatureAlgorithm
		inputs["responseSignatureScope"] = args.ResponseSignatureScope
		inputs["ssoBinding"] = args.SsoBinding
		inputs["ssoDestination"] = args.SsoDestination
		inputs["ssoUrl"] = args.SsoUrl
		inputs["status"] = args.Status
		inputs["subjectFilter"] = args.SubjectFilter
		inputs["subjectFormats"] = args.SubjectFormats
		inputs["subjectMatchAttribute"] = args.SubjectMatchAttribute
		inputs["subjectMatchType"] = args.SubjectMatchType
		inputs["suspendedAction"] = args.SuspendedAction
		inputs["usernameTemplate"] = args.UsernameTemplate
	}
	inputs["audience"] = nil
	inputs["type"] = nil
	s, err := ctx.RegisterResource("okta:idp/saml:Saml", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Saml{s: s}, nil
}

// GetSaml gets an existing Saml resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSaml(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SamlState, opts ...pulumi.ResourceOpt) (*Saml, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accountLinkAction"] = state.AccountLinkAction
		inputs["accountLinkGroupIncludes"] = state.AccountLinkGroupIncludes
		inputs["acsBinding"] = state.AcsBinding
		inputs["acsType"] = state.AcsType
		inputs["audience"] = state.Audience
		inputs["deprovisionedAction"] = state.DeprovisionedAction
		inputs["groupsAction"] = state.GroupsAction
		inputs["groupsAssignments"] = state.GroupsAssignments
		inputs["groupsAttribute"] = state.GroupsAttribute
		inputs["groupsFilters"] = state.GroupsFilters
		inputs["issuer"] = state.Issuer
		inputs["issuerMode"] = state.IssuerMode
		inputs["kid"] = state.Kid
		inputs["name"] = state.Name
		inputs["nameFormat"] = state.NameFormat
		inputs["profileMaster"] = state.ProfileMaster
		inputs["provisioningAction"] = state.ProvisioningAction
		inputs["requestSignatureAlgorithm"] = state.RequestSignatureAlgorithm
		inputs["requestSignatureScope"] = state.RequestSignatureScope
		inputs["responseSignatureAlgorithm"] = state.ResponseSignatureAlgorithm
		inputs["responseSignatureScope"] = state.ResponseSignatureScope
		inputs["ssoBinding"] = state.SsoBinding
		inputs["ssoDestination"] = state.SsoDestination
		inputs["ssoUrl"] = state.SsoUrl
		inputs["status"] = state.Status
		inputs["subjectFilter"] = state.SubjectFilter
		inputs["subjectFormats"] = state.SubjectFormats
		inputs["subjectMatchAttribute"] = state.SubjectMatchAttribute
		inputs["subjectMatchType"] = state.SubjectMatchType
		inputs["suspendedAction"] = state.SuspendedAction
		inputs["type"] = state.Type
		inputs["usernameTemplate"] = state.UsernameTemplate
	}
	s, err := ctx.ReadResource("okta:idp/saml:Saml", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Saml{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Saml) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Saml) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Specifies the account linking action for an IdP user.
func (r *Saml) AccountLinkAction() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["accountLinkAction"])
}

// Group memberships to determine link candidates.
func (r *Saml) AccountLinkGroupIncludes() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["accountLinkGroupIncludes"])
}

// The method of making an ACS request. It can be set to `"HTTP-POST"` or `"HTTP-REDIRECT"`.
func (r *Saml) AcsBinding() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["acsBinding"])
}

// The type of ACS. It can be `"INSTANCE"` or `"ORG"`.
func (r *Saml) AcsType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["acsType"])
}

// The audience restriction for the IdP.
func (r *Saml) Audience() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["audience"])
}

// Action for a previously deprovisioned IdP user during authentication. Can be `"NONE"` or `"REACTIVATE"`.
func (r *Saml) DeprovisionedAction() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["deprovisionedAction"])
}

// Provisioning action for IdP user's group memberships. It can be `"NONE"`, `"SYNC"`, `"APPEND"`, or `"ASSIGN"`.
func (r *Saml) GroupsAction() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["groupsAction"])
}

// List of Okta Group IDs to add an IdP user as a member with the `"ASSIGN"` `groupsAction`.
func (r *Saml) GroupsAssignments() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["groupsAssignments"])
}

// IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
func (r *Saml) GroupsAttribute() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["groupsAttribute"])
}

// Whitelist of Okta Group identifiers that are allowed for the `"APPEND"` or `"SYNC"` `groupsAction`.
func (r *Saml) GroupsFilters() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["groupsFilters"])
}

// URI that identifies the issuer.
func (r *Saml) Issuer() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["issuer"])
}

// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL. It can be `"ORG_URL"` or `"CUSTOM_URL"`.
func (r *Saml) IssuerMode() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["issuerMode"])
}

// The ID of the signing key.
func (r *Saml) Kid() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["kid"])
}

// The Application's display name.
func (r *Saml) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The name identifier format to use. By default `"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"`.
func (r *Saml) NameFormat() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["nameFormat"])
}

// Determines if the IdP should act as a source of truth for user profile attributes.
func (r *Saml) ProfileMaster() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["profileMaster"])
}

// Provisioning action for an IdP user during authentication.
func (r *Saml) ProvisioningAction() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["provisioningAction"])
}

// The XML digital signature algorithm used when signing an AuthnRequest message.
func (r *Saml) RequestSignatureAlgorithm() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["requestSignatureAlgorithm"])
}

// Specifies whether or not to digitally sign an AuthnRequest messages to the IdP. It can be `"REQUEST"` or `"NONE"`.
func (r *Saml) RequestSignatureScope() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["requestSignatureScope"])
}

// The minimum XML digital signature algorithm allowed when verifying a SAMLResponse message or Assertion element.
func (r *Saml) ResponseSignatureAlgorithm() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["responseSignatureAlgorithm"])
}

// Specifies whether to verify a SAMLResponse message or Assertion element XML digital signature. It can be `"RESPONSE"`, `"ASSERTION"`, or `"ANY"`.
func (r *Saml) ResponseSignatureScope() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["responseSignatureScope"])
}

// The method of making an SSO request. It can be set to `"HTTP-POST"` or `"HTTP-REDIRECT"`.
func (r *Saml) SsoBinding() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ssoBinding"])
}

// URI reference indicating the address to which the AuthnRequest message is sent.
func (r *Saml) SsoDestination() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ssoDestination"])
}

// URL of binding-specific endpoint to send an AuthnRequest message to IdP.
func (r *Saml) SsoUrl() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ssoUrl"])
}

// Status of the IdP.
func (r *Saml) Status() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["status"])
}

// Optional regular expression pattern used to filter untrusted IdP usernames.
func (r *Saml) SubjectFilter() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["subjectFilter"])
}

// The name formate. By default `"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"`.
func (r *Saml) SubjectFormats() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["subjectFormats"])
}

// Okta user profile attribute for matching transformed IdP username. Only for matchType `"CUSTOM_ATTRIBUTE"`.
func (r *Saml) SubjectMatchAttribute() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["subjectMatchAttribute"])
}

// Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default it is set to `"USERNAME"`. It can be set to `"USERNAME"`, `"EMAIL"`, `"USERNAME_OR_EMAIL"` or `"CUSTOM_ATTRIBUTE"`.
func (r *Saml) SubjectMatchType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["subjectMatchType"])
}

// Action for a previously suspended IdP user during authentication. Can be set to `"NONE"` or `"UNSUSPEND"`
func (r *Saml) SuspendedAction() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["suspendedAction"])
}

// Type of the IdP.
func (r *Saml) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// Okta EL Expression to generate or transform a unique username for the IdP user.
func (r *Saml) UsernameTemplate() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["usernameTemplate"])
}

// Input properties used for looking up and filtering Saml resources.
type SamlState struct {
	// Specifies the account linking action for an IdP user.
	AccountLinkAction interface{}
	// Group memberships to determine link candidates.
	AccountLinkGroupIncludes interface{}
	// The method of making an ACS request. It can be set to `"HTTP-POST"` or `"HTTP-REDIRECT"`.
	AcsBinding interface{}
	// The type of ACS. It can be `"INSTANCE"` or `"ORG"`.
	AcsType interface{}
	// The audience restriction for the IdP.
	Audience interface{}
	// Action for a previously deprovisioned IdP user during authentication. Can be `"NONE"` or `"REACTIVATE"`.
	DeprovisionedAction interface{}
	// Provisioning action for IdP user's group memberships. It can be `"NONE"`, `"SYNC"`, `"APPEND"`, or `"ASSIGN"`.
	GroupsAction interface{}
	// List of Okta Group IDs to add an IdP user as a member with the `"ASSIGN"` `groupsAction`.
	GroupsAssignments interface{}
	// IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
	GroupsAttribute interface{}
	// Whitelist of Okta Group identifiers that are allowed for the `"APPEND"` or `"SYNC"` `groupsAction`.
	GroupsFilters interface{}
	// URI that identifies the issuer.
	Issuer interface{}
	// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL. It can be `"ORG_URL"` or `"CUSTOM_URL"`.
	IssuerMode interface{}
	// The ID of the signing key.
	Kid interface{}
	// The Application's display name.
	Name interface{}
	// The name identifier format to use. By default `"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"`.
	NameFormat interface{}
	// Determines if the IdP should act as a source of truth for user profile attributes.
	ProfileMaster interface{}
	// Provisioning action for an IdP user during authentication.
	ProvisioningAction interface{}
	// The XML digital signature algorithm used when signing an AuthnRequest message.
	RequestSignatureAlgorithm interface{}
	// Specifies whether or not to digitally sign an AuthnRequest messages to the IdP. It can be `"REQUEST"` or `"NONE"`.
	RequestSignatureScope interface{}
	// The minimum XML digital signature algorithm allowed when verifying a SAMLResponse message or Assertion element.
	ResponseSignatureAlgorithm interface{}
	// Specifies whether to verify a SAMLResponse message or Assertion element XML digital signature. It can be `"RESPONSE"`, `"ASSERTION"`, or `"ANY"`.
	ResponseSignatureScope interface{}
	// The method of making an SSO request. It can be set to `"HTTP-POST"` or `"HTTP-REDIRECT"`.
	SsoBinding interface{}
	// URI reference indicating the address to which the AuthnRequest message is sent.
	SsoDestination interface{}
	// URL of binding-specific endpoint to send an AuthnRequest message to IdP.
	SsoUrl interface{}
	// Status of the IdP.
	Status interface{}
	// Optional regular expression pattern used to filter untrusted IdP usernames.
	SubjectFilter interface{}
	// The name formate. By default `"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"`.
	SubjectFormats interface{}
	// Okta user profile attribute for matching transformed IdP username. Only for matchType `"CUSTOM_ATTRIBUTE"`.
	SubjectMatchAttribute interface{}
	// Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default it is set to `"USERNAME"`. It can be set to `"USERNAME"`, `"EMAIL"`, `"USERNAME_OR_EMAIL"` or `"CUSTOM_ATTRIBUTE"`.
	SubjectMatchType interface{}
	// Action for a previously suspended IdP user during authentication. Can be set to `"NONE"` or `"UNSUSPEND"`
	SuspendedAction interface{}
	// Type of the IdP.
	Type interface{}
	// Okta EL Expression to generate or transform a unique username for the IdP user.
	UsernameTemplate interface{}
}

// The set of arguments for constructing a Saml resource.
type SamlArgs struct {
	// Specifies the account linking action for an IdP user.
	AccountLinkAction interface{}
	// Group memberships to determine link candidates.
	AccountLinkGroupIncludes interface{}
	// The method of making an ACS request. It can be set to `"HTTP-POST"` or `"HTTP-REDIRECT"`.
	AcsBinding interface{}
	// The type of ACS. It can be `"INSTANCE"` or `"ORG"`.
	AcsType interface{}
	// Action for a previously deprovisioned IdP user during authentication. Can be `"NONE"` or `"REACTIVATE"`.
	DeprovisionedAction interface{}
	// Provisioning action for IdP user's group memberships. It can be `"NONE"`, `"SYNC"`, `"APPEND"`, or `"ASSIGN"`.
	GroupsAction interface{}
	// List of Okta Group IDs to add an IdP user as a member with the `"ASSIGN"` `groupsAction`.
	GroupsAssignments interface{}
	// IdP user profile attribute name (case-insensitive) for an array value that contains group memberships.
	GroupsAttribute interface{}
	// Whitelist of Okta Group identifiers that are allowed for the `"APPEND"` or `"SYNC"` `groupsAction`.
	GroupsFilters interface{}
	// URI that identifies the issuer.
	Issuer interface{}
	// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL. It can be `"ORG_URL"` or `"CUSTOM_URL"`.
	IssuerMode interface{}
	// The ID of the signing key.
	Kid interface{}
	// The Application's display name.
	Name interface{}
	// The name identifier format to use. By default `"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"`.
	NameFormat interface{}
	// Determines if the IdP should act as a source of truth for user profile attributes.
	ProfileMaster interface{}
	// Provisioning action for an IdP user during authentication.
	ProvisioningAction interface{}
	// The XML digital signature algorithm used when signing an AuthnRequest message.
	RequestSignatureAlgorithm interface{}
	// Specifies whether or not to digitally sign an AuthnRequest messages to the IdP. It can be `"REQUEST"` or `"NONE"`.
	RequestSignatureScope interface{}
	// The minimum XML digital signature algorithm allowed when verifying a SAMLResponse message or Assertion element.
	ResponseSignatureAlgorithm interface{}
	// Specifies whether to verify a SAMLResponse message or Assertion element XML digital signature. It can be `"RESPONSE"`, `"ASSERTION"`, or `"ANY"`.
	ResponseSignatureScope interface{}
	// The method of making an SSO request. It can be set to `"HTTP-POST"` or `"HTTP-REDIRECT"`.
	SsoBinding interface{}
	// URI reference indicating the address to which the AuthnRequest message is sent.
	SsoDestination interface{}
	// URL of binding-specific endpoint to send an AuthnRequest message to IdP.
	SsoUrl interface{}
	// Status of the IdP.
	Status interface{}
	// Optional regular expression pattern used to filter untrusted IdP usernames.
	SubjectFilter interface{}
	// The name formate. By default `"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"`.
	SubjectFormats interface{}
	// Okta user profile attribute for matching transformed IdP username. Only for matchType `"CUSTOM_ATTRIBUTE"`.
	SubjectMatchAttribute interface{}
	// Determines the Okta user profile attribute match conditions for account linking and authentication of the transformed IdP username. By default it is set to `"USERNAME"`. It can be set to `"USERNAME"`, `"EMAIL"`, `"USERNAME_OR_EMAIL"` or `"CUSTOM_ATTRIBUTE"`.
	SubjectMatchType interface{}
	// Action for a previously suspended IdP user during authentication. Can be set to `"NONE"` or `"UNSUSPEND"`
	SuspendedAction interface{}
	// Okta EL Expression to generate or transform a unique username for the IdP user.
	UsernameTemplate interface{}
}
