// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package policy

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates an MFA Policy.
// 
// This resource allows you to create and configure an MFA Policy.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-okta/blob/master/website/docs/r/policy_mfa.html.markdown.
type Mfa struct {
	s *pulumi.ResourceState
}

// NewMfa registers a new resource with the given unique name, arguments, and options.
func NewMfa(ctx *pulumi.Context,
	name string, args *MfaArgs, opts ...pulumi.ResourceOpt) (*Mfa, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["duo"] = nil
		inputs["fidoU2f"] = nil
		inputs["fidoWebauthn"] = nil
		inputs["googleOtp"] = nil
		inputs["groupsIncludeds"] = nil
		inputs["name"] = nil
		inputs["oktaCall"] = nil
		inputs["oktaOtp"] = nil
		inputs["oktaPassword"] = nil
		inputs["oktaPush"] = nil
		inputs["oktaQuestion"] = nil
		inputs["oktaSms"] = nil
		inputs["priority"] = nil
		inputs["rsaToken"] = nil
		inputs["status"] = nil
		inputs["symantecVip"] = nil
		inputs["yubikeyToken"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["duo"] = args.Duo
		inputs["fidoU2f"] = args.FidoU2f
		inputs["fidoWebauthn"] = args.FidoWebauthn
		inputs["googleOtp"] = args.GoogleOtp
		inputs["groupsIncludeds"] = args.GroupsIncludeds
		inputs["name"] = args.Name
		inputs["oktaCall"] = args.OktaCall
		inputs["oktaOtp"] = args.OktaOtp
		inputs["oktaPassword"] = args.OktaPassword
		inputs["oktaPush"] = args.OktaPush
		inputs["oktaQuestion"] = args.OktaQuestion
		inputs["oktaSms"] = args.OktaSms
		inputs["priority"] = args.Priority
		inputs["rsaToken"] = args.RsaToken
		inputs["status"] = args.Status
		inputs["symantecVip"] = args.SymantecVip
		inputs["yubikeyToken"] = args.YubikeyToken
	}
	s, err := ctx.RegisterResource("okta:policy/mfa:Mfa", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Mfa{s: s}, nil
}

// GetMfa gets an existing Mfa resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMfa(ctx *pulumi.Context,
	name string, id pulumi.ID, state *MfaState, opts ...pulumi.ResourceOpt) (*Mfa, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["duo"] = state.Duo
		inputs["fidoU2f"] = state.FidoU2f
		inputs["fidoWebauthn"] = state.FidoWebauthn
		inputs["googleOtp"] = state.GoogleOtp
		inputs["groupsIncludeds"] = state.GroupsIncludeds
		inputs["name"] = state.Name
		inputs["oktaCall"] = state.OktaCall
		inputs["oktaOtp"] = state.OktaOtp
		inputs["oktaPassword"] = state.OktaPassword
		inputs["oktaPush"] = state.OktaPush
		inputs["oktaQuestion"] = state.OktaQuestion
		inputs["oktaSms"] = state.OktaSms
		inputs["priority"] = state.Priority
		inputs["rsaToken"] = state.RsaToken
		inputs["status"] = state.Status
		inputs["symantecVip"] = state.SymantecVip
		inputs["yubikeyToken"] = state.YubikeyToken
	}
	s, err := ctx.ReadResource("okta:policy/mfa:Mfa", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Mfa{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Mfa) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Mfa) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Policy Description.
func (r *Mfa) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// DUO MFA policy settings.
func (r *Mfa) Duo() *pulumi.Output {
	return r.s.State["duo"]
}

// Fido U2F MFA policy settings.
func (r *Mfa) FidoU2f() *pulumi.Output {
	return r.s.State["fidoU2f"]
}

// Fido Web Authn MFA policy settings.
func (r *Mfa) FidoWebauthn() *pulumi.Output {
	return r.s.State["fidoWebauthn"]
}

// Google OTP MFA policy settings.
func (r *Mfa) GoogleOtp() *pulumi.Output {
	return r.s.State["googleOtp"]
}

// List of Group IDs to Include.
func (r *Mfa) GroupsIncludeds() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["groupsIncludeds"])
}

// Policy Name.
func (r *Mfa) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Okta Call MFA policy settings.
func (r *Mfa) OktaCall() *pulumi.Output {
	return r.s.State["oktaCall"]
}

// Okta OTP MFA policy settings.
func (r *Mfa) OktaOtp() *pulumi.Output {
	return r.s.State["oktaOtp"]
}

// Okta Password MFA policy settings.
func (r *Mfa) OktaPassword() *pulumi.Output {
	return r.s.State["oktaPassword"]
}

// Okta Push MFA policy settings.
func (r *Mfa) OktaPush() *pulumi.Output {
	return r.s.State["oktaPush"]
}

// Okta Question MFA policy settings.
func (r *Mfa) OktaQuestion() *pulumi.Output {
	return r.s.State["oktaQuestion"]
}

// Okta SMS MFA policy settings.
func (r *Mfa) OktaSms() *pulumi.Output {
	return r.s.State["oktaSms"]
}

// Priority of the policy.
func (r *Mfa) Priority() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["priority"])
}

// RSA Token MFA policy settings.
func (r *Mfa) RsaToken() *pulumi.Output {
	return r.s.State["rsaToken"]
}

// Policy Status: `"ACTIVE"` or `"INACTIVE"`.
func (r *Mfa) Status() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["status"])
}

// Symantec VIP MFA policy settings.
func (r *Mfa) SymantecVip() *pulumi.Output {
	return r.s.State["symantecVip"]
}

// Yubikey Token MFA policy settings.
func (r *Mfa) YubikeyToken() *pulumi.Output {
	return r.s.State["yubikeyToken"]
}

// Input properties used for looking up and filtering Mfa resources.
type MfaState struct {
	// Policy Description.
	Description interface{}
	// DUO MFA policy settings.
	Duo interface{}
	// Fido U2F MFA policy settings.
	FidoU2f interface{}
	// Fido Web Authn MFA policy settings.
	FidoWebauthn interface{}
	// Google OTP MFA policy settings.
	GoogleOtp interface{}
	// List of Group IDs to Include.
	GroupsIncludeds interface{}
	// Policy Name.
	Name interface{}
	// Okta Call MFA policy settings.
	OktaCall interface{}
	// Okta OTP MFA policy settings.
	OktaOtp interface{}
	// Okta Password MFA policy settings.
	OktaPassword interface{}
	// Okta Push MFA policy settings.
	OktaPush interface{}
	// Okta Question MFA policy settings.
	OktaQuestion interface{}
	// Okta SMS MFA policy settings.
	OktaSms interface{}
	// Priority of the policy.
	Priority interface{}
	// RSA Token MFA policy settings.
	RsaToken interface{}
	// Policy Status: `"ACTIVE"` or `"INACTIVE"`.
	Status interface{}
	// Symantec VIP MFA policy settings.
	SymantecVip interface{}
	// Yubikey Token MFA policy settings.
	YubikeyToken interface{}
}

// The set of arguments for constructing a Mfa resource.
type MfaArgs struct {
	// Policy Description.
	Description interface{}
	// DUO MFA policy settings.
	Duo interface{}
	// Fido U2F MFA policy settings.
	FidoU2f interface{}
	// Fido Web Authn MFA policy settings.
	FidoWebauthn interface{}
	// Google OTP MFA policy settings.
	GoogleOtp interface{}
	// List of Group IDs to Include.
	GroupsIncludeds interface{}
	// Policy Name.
	Name interface{}
	// Okta Call MFA policy settings.
	OktaCall interface{}
	// Okta OTP MFA policy settings.
	OktaOtp interface{}
	// Okta Password MFA policy settings.
	OktaPassword interface{}
	// Okta Push MFA policy settings.
	OktaPush interface{}
	// Okta Question MFA policy settings.
	OktaQuestion interface{}
	// Okta SMS MFA policy settings.
	OktaSms interface{}
	// Priority of the policy.
	Priority interface{}
	// RSA Token MFA policy settings.
	RsaToken interface{}
	// Policy Status: `"ACTIVE"` or `"INACTIVE"`.
	Status interface{}
	// Symantec VIP MFA policy settings.
	SymantecVip interface{}
	// Yubikey Token MFA policy settings.
	YubikeyToken interface{}
}
