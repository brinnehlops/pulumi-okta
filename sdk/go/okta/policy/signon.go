// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package policy

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates a Sign On Policy.
// 
// This resource allows you to create and configure a Sign On Policy.
//
// > This content is derived from https://github.com/articulate/terraform-provider-okta/blob/master/website/docs/r/policy_signon.html.markdown.
type Signon struct {
	s *pulumi.ResourceState
}

// NewSignon registers a new resource with the given unique name, arguments, and options.
func NewSignon(ctx *pulumi.Context,
	name string, args *SignonArgs, opts ...pulumi.ResourceOpt) (*Signon, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["groupsIncludeds"] = nil
		inputs["name"] = nil
		inputs["priority"] = nil
		inputs["status"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["groupsIncludeds"] = args.GroupsIncludeds
		inputs["name"] = args.Name
		inputs["priority"] = args.Priority
		inputs["status"] = args.Status
	}
	s, err := ctx.RegisterResource("okta:policy/signon:Signon", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Signon{s: s}, nil
}

// GetSignon gets an existing Signon resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSignon(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SignonState, opts ...pulumi.ResourceOpt) (*Signon, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["groupsIncludeds"] = state.GroupsIncludeds
		inputs["name"] = state.Name
		inputs["priority"] = state.Priority
		inputs["status"] = state.Status
	}
	s, err := ctx.ReadResource("okta:policy/signon:Signon", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Signon{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Signon) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Signon) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Policy Description.
func (r *Signon) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// List of Group IDs to Include.
func (r *Signon) GroupsIncludeds() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["groupsIncludeds"])
}

// Policy Name.
func (r *Signon) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Priority of the policy.
func (r *Signon) Priority() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["priority"])
}

// Policy Status: `"ACTIVE"` or `"INACTIVE"`.
func (r *Signon) Status() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["status"])
}

// Input properties used for looking up and filtering Signon resources.
type SignonState struct {
	// Policy Description.
	Description interface{}
	// List of Group IDs to Include.
	GroupsIncludeds interface{}
	// Policy Name.
	Name interface{}
	// Priority of the policy.
	Priority interface{}
	// Policy Status: `"ACTIVE"` or `"INACTIVE"`.
	Status interface{}
}

// The set of arguments for constructing a Signon resource.
type SignonArgs struct {
	// Policy Description.
	Description interface{}
	// List of Group IDs to Include.
	GroupsIncludeds interface{}
	// Policy Name.
	Name interface{}
	// Priority of the policy.
	Priority interface{}
	// Policy Status: `"ACTIVE"` or `"INACTIVE"`.
	Status interface{}
}
