// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package policy

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates an IdP Discovery Policy Rule.
// 
// This resource allows you to create and configure an IdP Discovery Policy Rule.
//
// > This content is derived from https://github.com/articulate/terraform-provider-okta/blob/master/website/docs/r/policy_rule_idp_discovery.html.markdown.
type RuleIdpDiscovery struct {
	s *pulumi.ResourceState
}

// NewRuleIdpDiscovery registers a new resource with the given unique name, arguments, and options.
func NewRuleIdpDiscovery(ctx *pulumi.Context,
	name string, args *RuleIdpDiscoveryArgs, opts ...pulumi.ResourceOpt) (*RuleIdpDiscovery, error) {
	if args == nil || args.Policyid == nil {
		return nil, errors.New("missing required argument 'Policyid'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["appExcludes"] = nil
		inputs["appIncludes"] = nil
		inputs["idpId"] = nil
		inputs["idpType"] = nil
		inputs["name"] = nil
		inputs["networkConnection"] = nil
		inputs["networkExcludes"] = nil
		inputs["networkIncludes"] = nil
		inputs["platformIncludes"] = nil
		inputs["policyid"] = nil
		inputs["priority"] = nil
		inputs["status"] = nil
		inputs["userIdentifierAttribute"] = nil
		inputs["userIdentifierPatterns"] = nil
		inputs["userIdentifierType"] = nil
	} else {
		inputs["appExcludes"] = args.AppExcludes
		inputs["appIncludes"] = args.AppIncludes
		inputs["idpId"] = args.IdpId
		inputs["idpType"] = args.IdpType
		inputs["name"] = args.Name
		inputs["networkConnection"] = args.NetworkConnection
		inputs["networkExcludes"] = args.NetworkExcludes
		inputs["networkIncludes"] = args.NetworkIncludes
		inputs["platformIncludes"] = args.PlatformIncludes
		inputs["policyid"] = args.Policyid
		inputs["priority"] = args.Priority
		inputs["status"] = args.Status
		inputs["userIdentifierAttribute"] = args.UserIdentifierAttribute
		inputs["userIdentifierPatterns"] = args.UserIdentifierPatterns
		inputs["userIdentifierType"] = args.UserIdentifierType
	}
	s, err := ctx.RegisterResource("okta:policy/ruleIdpDiscovery:RuleIdpDiscovery", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RuleIdpDiscovery{s: s}, nil
}

// GetRuleIdpDiscovery gets an existing RuleIdpDiscovery resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuleIdpDiscovery(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RuleIdpDiscoveryState, opts ...pulumi.ResourceOpt) (*RuleIdpDiscovery, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["appExcludes"] = state.AppExcludes
		inputs["appIncludes"] = state.AppIncludes
		inputs["idpId"] = state.IdpId
		inputs["idpType"] = state.IdpType
		inputs["name"] = state.Name
		inputs["networkConnection"] = state.NetworkConnection
		inputs["networkExcludes"] = state.NetworkExcludes
		inputs["networkIncludes"] = state.NetworkIncludes
		inputs["platformIncludes"] = state.PlatformIncludes
		inputs["policyid"] = state.Policyid
		inputs["priority"] = state.Priority
		inputs["status"] = state.Status
		inputs["userIdentifierAttribute"] = state.UserIdentifierAttribute
		inputs["userIdentifierPatterns"] = state.UserIdentifierPatterns
		inputs["userIdentifierType"] = state.UserIdentifierType
	}
	s, err := ctx.ReadResource("okta:policy/ruleIdpDiscovery:RuleIdpDiscovery", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RuleIdpDiscovery{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *RuleIdpDiscovery) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *RuleIdpDiscovery) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Applications to exclude in discovery rule
func (r *RuleIdpDiscovery) AppExcludes() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["appExcludes"])
}

// Applications to include in discovery rule
func (r *RuleIdpDiscovery) AppIncludes() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["appIncludes"])
}

func (r *RuleIdpDiscovery) IdpId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["idpId"])
}

func (r *RuleIdpDiscovery) IdpType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["idpType"])
}

// Policy Rule Name.
func (r *RuleIdpDiscovery) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
func (r *RuleIdpDiscovery) NetworkConnection() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["networkConnection"])
}

// The network zones to exclude. Conflicts with `networkIncludes`.
func (r *RuleIdpDiscovery) NetworkExcludes() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["networkExcludes"])
}

// The network zones to include. Conflicts with `networkExcludes`.
func (r *RuleIdpDiscovery) NetworkIncludes() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["networkIncludes"])
}

func (r *RuleIdpDiscovery) PlatformIncludes() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["platformIncludes"])
}

// Policy ID.
func (r *RuleIdpDiscovery) Policyid() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["policyid"])
}

// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last/lowest if not there.
func (r *RuleIdpDiscovery) Priority() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["priority"])
}

// Policy Rule Status: `"ACTIVE"` or `"INACTIVE"`.
func (r *RuleIdpDiscovery) Status() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["status"])
}

func (r *RuleIdpDiscovery) UserIdentifierAttribute() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["userIdentifierAttribute"])
}

func (r *RuleIdpDiscovery) UserIdentifierPatterns() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["userIdentifierPatterns"])
}

func (r *RuleIdpDiscovery) UserIdentifierType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["userIdentifierType"])
}

// Input properties used for looking up and filtering RuleIdpDiscovery resources.
type RuleIdpDiscoveryState struct {
	// Applications to exclude in discovery rule
	AppExcludes interface{}
	// Applications to include in discovery rule
	AppIncludes interface{}
	IdpId interface{}
	IdpType interface{}
	// Policy Rule Name.
	Name interface{}
	// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
	NetworkConnection interface{}
	// The network zones to exclude. Conflicts with `networkIncludes`.
	NetworkExcludes interface{}
	// The network zones to include. Conflicts with `networkExcludes`.
	NetworkIncludes interface{}
	PlatformIncludes interface{}
	// Policy ID.
	Policyid interface{}
	// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last/lowest if not there.
	Priority interface{}
	// Policy Rule Status: `"ACTIVE"` or `"INACTIVE"`.
	Status interface{}
	UserIdentifierAttribute interface{}
	UserIdentifierPatterns interface{}
	UserIdentifierType interface{}
}

// The set of arguments for constructing a RuleIdpDiscovery resource.
type RuleIdpDiscoveryArgs struct {
	// Applications to exclude in discovery rule
	AppExcludes interface{}
	// Applications to include in discovery rule
	AppIncludes interface{}
	IdpId interface{}
	IdpType interface{}
	// Policy Rule Name.
	Name interface{}
	// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
	NetworkConnection interface{}
	// The network zones to exclude. Conflicts with `networkIncludes`.
	NetworkExcludes interface{}
	// The network zones to include. Conflicts with `networkExcludes`.
	NetworkIncludes interface{}
	PlatformIncludes interface{}
	// Policy ID.
	Policyid interface{}
	// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last/lowest if not there.
	Priority interface{}
	// Policy Rule Status: `"ACTIVE"` or `"INACTIVE"`.
	Status interface{}
	UserIdentifierAttribute interface{}
	UserIdentifierPatterns interface{}
	UserIdentifierType interface{}
}
