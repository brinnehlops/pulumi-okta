// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package policy

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates an MFA Policy Rule.
// 
// This resource allows you to create and configure an MFA Policy Rule.
//
// > This content is derived from https://github.com/articulate/terraform-provider-okta/blob/master/website/docs/r/policy_rule_mfa.html.markdown.
type RuleMfa struct {
	s *pulumi.ResourceState
}

// NewRuleMfa registers a new resource with the given unique name, arguments, and options.
func NewRuleMfa(ctx *pulumi.Context,
	name string, args *RuleMfaArgs, opts ...pulumi.ResourceOpt) (*RuleMfa, error) {
	if args == nil || args.Policyid == nil {
		return nil, errors.New("missing required argument 'Policyid'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["enroll"] = nil
		inputs["name"] = nil
		inputs["networkConnection"] = nil
		inputs["networkExcludes"] = nil
		inputs["networkIncludes"] = nil
		inputs["policyid"] = nil
		inputs["priority"] = nil
		inputs["status"] = nil
		inputs["usersExcludeds"] = nil
	} else {
		inputs["enroll"] = args.Enroll
		inputs["name"] = args.Name
		inputs["networkConnection"] = args.NetworkConnection
		inputs["networkExcludes"] = args.NetworkExcludes
		inputs["networkIncludes"] = args.NetworkIncludes
		inputs["policyid"] = args.Policyid
		inputs["priority"] = args.Priority
		inputs["status"] = args.Status
		inputs["usersExcludeds"] = args.UsersExcludeds
	}
	s, err := ctx.RegisterResource("okta:policy/ruleMfa:RuleMfa", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RuleMfa{s: s}, nil
}

// GetRuleMfa gets an existing RuleMfa resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuleMfa(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RuleMfaState, opts ...pulumi.ResourceOpt) (*RuleMfa, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["enroll"] = state.Enroll
		inputs["name"] = state.Name
		inputs["networkConnection"] = state.NetworkConnection
		inputs["networkExcludes"] = state.NetworkExcludes
		inputs["networkIncludes"] = state.NetworkIncludes
		inputs["policyid"] = state.Policyid
		inputs["priority"] = state.Priority
		inputs["status"] = state.Status
		inputs["usersExcludeds"] = state.UsersExcludeds
	}
	s, err := ctx.ReadResource("okta:policy/ruleMfa:RuleMfa", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RuleMfa{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *RuleMfa) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *RuleMfa) ID() pulumi.IDOutput {
	return r.s.ID()
}

// When a user should be prompted for MFA. It can be `"CHALLENGE"`, `"LOGIN"`, or `"NEVER"`.
func (r *RuleMfa) Enroll() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["enroll"])
}

// Policy Rule Name.
func (r *RuleMfa) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
func (r *RuleMfa) NetworkConnection() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["networkConnection"])
}

// The network zones to exclude. Conflicts with `networkIncludes`.
func (r *RuleMfa) NetworkExcludes() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["networkExcludes"])
}

// The network zones to include. Conflicts with `networkExcludes`.
func (r *RuleMfa) NetworkIncludes() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["networkIncludes"])
}

// Policy ID.
func (r *RuleMfa) Policyid() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["policyid"])
}

// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last/lowest if not there.
func (r *RuleMfa) Priority() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["priority"])
}

// Policy Rule Status: `"ACTIVE"` or `"INACTIVE"`.
func (r *RuleMfa) Status() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["status"])
}

// Set of User IDs to Exclude
func (r *RuleMfa) UsersExcludeds() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["usersExcludeds"])
}

// Input properties used for looking up and filtering RuleMfa resources.
type RuleMfaState struct {
	// When a user should be prompted for MFA. It can be `"CHALLENGE"`, `"LOGIN"`, or `"NEVER"`.
	Enroll interface{}
	// Policy Rule Name.
	Name interface{}
	// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
	NetworkConnection interface{}
	// The network zones to exclude. Conflicts with `networkIncludes`.
	NetworkExcludes interface{}
	// The network zones to include. Conflicts with `networkExcludes`.
	NetworkIncludes interface{}
	// Policy ID.
	Policyid interface{}
	// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last/lowest if not there.
	Priority interface{}
	// Policy Rule Status: `"ACTIVE"` or `"INACTIVE"`.
	Status interface{}
	// Set of User IDs to Exclude
	UsersExcludeds interface{}
}

// The set of arguments for constructing a RuleMfa resource.
type RuleMfaArgs struct {
	// When a user should be prompted for MFA. It can be `"CHALLENGE"`, `"LOGIN"`, or `"NEVER"`.
	Enroll interface{}
	// Policy Rule Name.
	Name interface{}
	// Network selection mode: `"ANYWHERE"`, `"ZONE"`, `"ON_NETWORK"`, or `"OFF_NETWORK"`.
	NetworkConnection interface{}
	// The network zones to exclude. Conflicts with `networkIncludes`.
	NetworkExcludes interface{}
	// The network zones to include. Conflicts with `networkExcludes`.
	NetworkIncludes interface{}
	// Policy ID.
	Policyid interface{}
	// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid priority is provided. API defaults it to the last/lowest if not there.
	Priority interface{}
	// Policy Rule Status: `"ACTIVE"` or `"INACTIVE"`.
	Status interface{}
	// Set of User IDs to Exclude
	UsersExcludeds interface{}
}
