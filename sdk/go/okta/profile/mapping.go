// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package profile

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Mapping struct {
	s *pulumi.ResourceState
}

// NewMapping registers a new resource with the given unique name, arguments, and options.
func NewMapping(ctx *pulumi.Context,
	name string, args *MappingArgs, opts ...pulumi.ResourceOpt) (*Mapping, error) {
	if args == nil || args.SourceId == nil {
		return nil, errors.New("missing required argument 'SourceId'")
	}
	if args == nil || args.TargetId == nil {
		return nil, errors.New("missing required argument 'TargetId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["deleteWhenAbsent"] = nil
		inputs["mappings"] = nil
		inputs["sourceId"] = nil
		inputs["targetId"] = nil
	} else {
		inputs["deleteWhenAbsent"] = args.DeleteWhenAbsent
		inputs["mappings"] = args.Mappings
		inputs["sourceId"] = args.SourceId
		inputs["targetId"] = args.TargetId
	}
	inputs["sourceName"] = nil
	inputs["sourceType"] = nil
	inputs["targetName"] = nil
	inputs["targetType"] = nil
	s, err := ctx.RegisterResource("okta:profile/mapping:Mapping", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Mapping{s: s}, nil
}

// GetMapping gets an existing Mapping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMapping(ctx *pulumi.Context,
	name string, id pulumi.ID, state *MappingState, opts ...pulumi.ResourceOpt) (*Mapping, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["deleteWhenAbsent"] = state.DeleteWhenAbsent
		inputs["mappings"] = state.Mappings
		inputs["sourceId"] = state.SourceId
		inputs["sourceName"] = state.SourceName
		inputs["sourceType"] = state.SourceType
		inputs["targetId"] = state.TargetId
		inputs["targetName"] = state.TargetName
		inputs["targetType"] = state.TargetType
	}
	s, err := ctx.ReadResource("okta:profile/mapping:Mapping", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Mapping{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Mapping) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Mapping) ID() pulumi.IDOutput {
	return r.s.ID()
}

// When turned on this flag will trigger the provider to delete mapping properties that are not defined in config. By
// default, we do not delete missing properties.
func (r *Mapping) DeleteWhenAbsent() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["deleteWhenAbsent"])
}

func (r *Mapping) Mappings() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["mappings"])
}

// The source id of the mapping to manage.
func (r *Mapping) SourceId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["sourceId"])
}

func (r *Mapping) SourceName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["sourceName"])
}

func (r *Mapping) SourceType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["sourceType"])
}

// The target id of the mapping to manage.
func (r *Mapping) TargetId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["targetId"])
}

func (r *Mapping) TargetName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["targetName"])
}

func (r *Mapping) TargetType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["targetType"])
}

// Input properties used for looking up and filtering Mapping resources.
type MappingState struct {
	// When turned on this flag will trigger the provider to delete mapping properties that are not defined in config. By
	// default, we do not delete missing properties.
	DeleteWhenAbsent interface{}
	Mappings interface{}
	// The source id of the mapping to manage.
	SourceId interface{}
	SourceName interface{}
	SourceType interface{}
	// The target id of the mapping to manage.
	TargetId interface{}
	TargetName interface{}
	TargetType interface{}
}

// The set of arguments for constructing a Mapping resource.
type MappingArgs struct {
	// When turned on this flag will trigger the provider to delete mapping properties that are not defined in config. By
	// default, we do not delete missing properties.
	DeleteWhenAbsent interface{}
	Mappings interface{}
	// The source id of the mapping to manage.
	SourceId interface{}
	// The target id of the mapping to manage.
	TargetId interface{}
}
