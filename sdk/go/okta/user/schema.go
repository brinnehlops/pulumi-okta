// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package user

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates a User Schema property.
// 
// This resource allows you to create and configure a custom user schema property.
//
// > This content is derived from https://github.com/articulate/terraform-provider-okta/blob/master/website/docs/r/user_schema.html.markdown.
type Schema struct {
	s *pulumi.ResourceState
}

// NewSchema registers a new resource with the given unique name, arguments, and options.
func NewSchema(ctx *pulumi.Context,
	name string, args *SchemaArgs, opts ...pulumi.ResourceOpt) (*Schema, error) {
	if args == nil || args.Index == nil {
		return nil, errors.New("missing required argument 'Index'")
	}
	if args == nil || args.Title == nil {
		return nil, errors.New("missing required argument 'Title'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["arrayEnums"] = nil
		inputs["arrayOneOfs"] = nil
		inputs["arrayType"] = nil
		inputs["description"] = nil
		inputs["enums"] = nil
		inputs["externalName"] = nil
		inputs["index"] = nil
		inputs["master"] = nil
		inputs["maxLength"] = nil
		inputs["minLength"] = nil
		inputs["oneOfs"] = nil
		inputs["permissions"] = nil
		inputs["required"] = nil
		inputs["scope"] = nil
		inputs["title"] = nil
		inputs["type"] = nil
	} else {
		inputs["arrayEnums"] = args.ArrayEnums
		inputs["arrayOneOfs"] = args.ArrayOneOfs
		inputs["arrayType"] = args.ArrayType
		inputs["description"] = args.Description
		inputs["enums"] = args.Enums
		inputs["externalName"] = args.ExternalName
		inputs["index"] = args.Index
		inputs["master"] = args.Master
		inputs["maxLength"] = args.MaxLength
		inputs["minLength"] = args.MinLength
		inputs["oneOfs"] = args.OneOfs
		inputs["permissions"] = args.Permissions
		inputs["required"] = args.Required
		inputs["scope"] = args.Scope
		inputs["title"] = args.Title
		inputs["type"] = args.Type
	}
	s, err := ctx.RegisterResource("okta:user/schema:Schema", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Schema{s: s}, nil
}

// GetSchema gets an existing Schema resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchema(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SchemaState, opts ...pulumi.ResourceOpt) (*Schema, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["arrayEnums"] = state.ArrayEnums
		inputs["arrayOneOfs"] = state.ArrayOneOfs
		inputs["arrayType"] = state.ArrayType
		inputs["description"] = state.Description
		inputs["enums"] = state.Enums
		inputs["externalName"] = state.ExternalName
		inputs["index"] = state.Index
		inputs["master"] = state.Master
		inputs["maxLength"] = state.MaxLength
		inputs["minLength"] = state.MinLength
		inputs["oneOfs"] = state.OneOfs
		inputs["permissions"] = state.Permissions
		inputs["required"] = state.Required
		inputs["scope"] = state.Scope
		inputs["title"] = state.Title
		inputs["type"] = state.Type
	}
	s, err := ctx.ReadResource("okta:user/schema:Schema", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Schema{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Schema) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Schema) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Array of values that an array property's items can be set to.
func (r *Schema) ArrayEnums() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["arrayEnums"])
}

// Display name and value an enum array can be set to.
func (r *Schema) ArrayOneOfs() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["arrayOneOfs"])
}

// The type of the array elements if `type` is set to `"array"`.
func (r *Schema) ArrayType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["arrayType"])
}

// The description of the user schema property.
func (r *Schema) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// Array of values a primitive property can be set to. See `arrayEnum` for arrays.
func (r *Schema) Enums() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["enums"])
}

// External name of the user schema property.
func (r *Schema) ExternalName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["externalName"])
}

// The property name.
func (r *Schema) Index() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["index"])
}

// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
func (r *Schema) Master() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["master"])
}

// The maximum length of the user property value. Only applies to type `"string"`.
func (r *Schema) MaxLength() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["maxLength"])
}

// The minimum length of the user property value. Only applies to type `"string"`.
func (r *Schema) MinLength() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["minLength"])
}

// Array of maps containing a mapping for display name to enum value.
func (r *Schema) OneOfs() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["oneOfs"])
}

// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
func (r *Schema) Permissions() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["permissions"])
}

// Whether the property is required for this application's users.
func (r *Schema) Required() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["required"])
}

// determines whether an app user attribute can be set at the Individual or Group Level.
func (r *Schema) Scope() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["scope"])
}

// display name for the enum value.
func (r *Schema) Title() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["title"])
}

// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
func (r *Schema) Type() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["type"])
}

// Input properties used for looking up and filtering Schema resources.
type SchemaState struct {
	// Array of values that an array property's items can be set to.
	ArrayEnums interface{}
	// Display name and value an enum array can be set to.
	ArrayOneOfs interface{}
	// The type of the array elements if `type` is set to `"array"`.
	ArrayType interface{}
	// The description of the user schema property.
	Description interface{}
	// Array of values a primitive property can be set to. See `arrayEnum` for arrays.
	Enums interface{}
	// External name of the user schema property.
	ExternalName interface{}
	// The property name.
	Index interface{}
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master interface{}
	// The maximum length of the user property value. Only applies to type `"string"`.
	MaxLength interface{}
	// The minimum length of the user property value. Only applies to type `"string"`.
	MinLength interface{}
	// Array of maps containing a mapping for display name to enum value.
	OneOfs interface{}
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions interface{}
	// Whether the property is required for this application's users.
	Required interface{}
	// determines whether an app user attribute can be set at the Individual or Group Level.
	Scope interface{}
	// display name for the enum value.
	Title interface{}
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type interface{}
}

// The set of arguments for constructing a Schema resource.
type SchemaArgs struct {
	// Array of values that an array property's items can be set to.
	ArrayEnums interface{}
	// Display name and value an enum array can be set to.
	ArrayOneOfs interface{}
	// The type of the array elements if `type` is set to `"array"`.
	ArrayType interface{}
	// The description of the user schema property.
	Description interface{}
	// Array of values a primitive property can be set to. See `arrayEnum` for arrays.
	Enums interface{}
	// External name of the user schema property.
	ExternalName interface{}
	// The property name.
	Index interface{}
	// Master priority for the user schema property. It can be set to `"PROFILE_MASTER"` or `"OKTA"`.
	Master interface{}
	// The maximum length of the user property value. Only applies to type `"string"`.
	MaxLength interface{}
	// The minimum length of the user property value. Only applies to type `"string"`.
	MinLength interface{}
	// Array of maps containing a mapping for display name to enum value.
	OneOfs interface{}
	// Access control permissions for the property. It can be set to `"READ_WRITE"`, `"READ_ONLY"`, `"HIDE"`.
	Permissions interface{}
	// Whether the property is required for this application's users.
	Required interface{}
	// determines whether an app user attribute can be set at the Individual or Group Level.
	Scope interface{}
	// display name for the enum value.
	Title interface{}
	// The type of the schema property. It can be `"string"`, `"boolean"`, `"number"`, `"integer"`, `"array"`, or `"object"`.
	Type interface{}
}
