// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package app

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Use this data source to retrieve the collaborators for a given repository.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-okta/blob/master/website/docs/d/app_saml.html.markdown.
func LookupSaml(ctx *pulumi.Context, args *GetSamlArgs) (*GetSamlResult, error) {
	inputs := make(map[string]interface{})
	if args != nil {
		inputs["accessibilityErrorRedirectUrl"] = args.AccessibilityErrorRedirectUrl
		inputs["accessibilityLoginRedirectUrl"] = args.AccessibilityLoginRedirectUrl
		inputs["accessibilitySelfService"] = args.AccessibilitySelfService
		inputs["activeOnly"] = args.ActiveOnly
		inputs["appSettingsJson"] = args.AppSettingsJson
		inputs["assertionSigned"] = args.AssertionSigned
		inputs["attributeStatements"] = args.AttributeStatements
		inputs["audience"] = args.Audience
		inputs["authnContextClassRef"] = args.AuthnContextClassRef
		inputs["autoSubmitToolbar"] = args.AutoSubmitToolbar
		inputs["defaultRelayState"] = args.DefaultRelayState
		inputs["destination"] = args.Destination
		inputs["digestAlgorithm"] = args.DigestAlgorithm
		inputs["features"] = args.Features
		inputs["hideIos"] = args.HideIos
		inputs["hideWeb"] = args.HideWeb
		inputs["honorForceAuthn"] = args.HonorForceAuthn
		inputs["id"] = args.Id
		inputs["idpIssuer"] = args.IdpIssuer
		inputs["label"] = args.Label
		inputs["labelPrefix"] = args.LabelPrefix
		inputs["recipient"] = args.Recipient
		inputs["requestCompressed"] = args.RequestCompressed
		inputs["responseSigned"] = args.ResponseSigned
		inputs["signatureAlgorithm"] = args.SignatureAlgorithm
		inputs["spIssuer"] = args.SpIssuer
		inputs["ssoUrl"] = args.SsoUrl
		inputs["subjectNameIdFormat"] = args.SubjectNameIdFormat
		inputs["subjectNameIdTemplate"] = args.SubjectNameIdTemplate
		inputs["userNameTemplate"] = args.UserNameTemplate
		inputs["userNameTemplateSuffix"] = args.UserNameTemplateSuffix
		inputs["userNameTemplateType"] = args.UserNameTemplateType
	}
	outputs, err := ctx.Invoke("okta:app/getSaml:getSaml", inputs)
	if err != nil {
		return nil, err
	}
	return &GetSamlResult{
		AccessibilityErrorRedirectUrl: outputs["accessibilityErrorRedirectUrl"],
		AccessibilityLoginRedirectUrl: outputs["accessibilityLoginRedirectUrl"],
		AccessibilitySelfService: outputs["accessibilitySelfService"],
		ActiveOnly: outputs["activeOnly"],
		AppSettingsJson: outputs["appSettingsJson"],
		AssertionSigned: outputs["assertionSigned"],
		AttributeStatements: outputs["attributeStatements"],
		Audience: outputs["audience"],
		AuthnContextClassRef: outputs["authnContextClassRef"],
		AutoSubmitToolbar: outputs["autoSubmitToolbar"],
		DefaultRelayState: outputs["defaultRelayState"],
		Description: outputs["description"],
		Destination: outputs["destination"],
		DigestAlgorithm: outputs["digestAlgorithm"],
		Features: outputs["features"],
		HideIos: outputs["hideIos"],
		HideWeb: outputs["hideWeb"],
		HonorForceAuthn: outputs["honorForceAuthn"],
		Id: outputs["id"],
		IdpIssuer: outputs["idpIssuer"],
		KeyId: outputs["keyId"],
		Label: outputs["label"],
		LabelPrefix: outputs["labelPrefix"],
		Name: outputs["name"],
		Recipient: outputs["recipient"],
		RequestCompressed: outputs["requestCompressed"],
		ResponseSigned: outputs["responseSigned"],
		SignatureAlgorithm: outputs["signatureAlgorithm"],
		SpIssuer: outputs["spIssuer"],
		SsoUrl: outputs["ssoUrl"],
		Status: outputs["status"],
		SubjectNameIdFormat: outputs["subjectNameIdFormat"],
		SubjectNameIdTemplate: outputs["subjectNameIdTemplate"],
		UserNameTemplate: outputs["userNameTemplate"],
		UserNameTemplateSuffix: outputs["userNameTemplateSuffix"],
		UserNameTemplateType: outputs["userNameTemplateType"],
	}, nil
}

// A collection of arguments for invoking getSaml.
type GetSamlArgs struct {
	AccessibilityErrorRedirectUrl interface{}
	AccessibilityLoginRedirectUrl interface{}
	AccessibilitySelfService interface{}
	// tells the provider to query for only `ACTIVE` applications.
	ActiveOnly interface{}
	AppSettingsJson interface{}
	AssertionSigned interface{}
	AttributeStatements interface{}
	Audience interface{}
	AuthnContextClassRef interface{}
	AutoSubmitToolbar interface{}
	DefaultRelayState interface{}
	Destination interface{}
	DigestAlgorithm interface{}
	Features interface{}
	HideIos interface{}
	HideWeb interface{}
	HonorForceAuthn interface{}
	// `id` of application to retrieve, conflicts with `label` and `labelPrefix`.
	Id interface{}
	IdpIssuer interface{}
	// The label of the app to retrieve, conflicts with `labelPrefix` and `id`.
	Label interface{}
	// Label prefix of the app to retrieve, conflicts with `label` and `id`. This will tell the provider to do a `starts with` query as opposed to an `equals` query.
	LabelPrefix interface{}
	Recipient interface{}
	RequestCompressed interface{}
	ResponseSigned interface{}
	SignatureAlgorithm interface{}
	SpIssuer interface{}
	SsoUrl interface{}
	SubjectNameIdFormat interface{}
	SubjectNameIdTemplate interface{}
	UserNameTemplate interface{}
	UserNameTemplateSuffix interface{}
	UserNameTemplateType interface{}
}

// A collection of values returned by getSaml.
type GetSamlResult struct {
	// Custom error page URL.
	AccessibilityErrorRedirectUrl interface{}
	// Custom login page URL.
	AccessibilityLoginRedirectUrl interface{}
	// Enable self service.
	AccessibilitySelfService interface{}
	ActiveOnly interface{}
	// Application settings in JSON format.
	AppSettingsJson interface{}
	// Determines whether the SAML assertion is digitally signed.
	AssertionSigned interface{}
	// SAML Attribute statements.
	AttributeStatements interface{}
	// Audience restriction.
	Audience interface{}
	// Identifies the SAML authentication context class for the assertionâ€™s authentication statement.
	AuthnContextClassRef interface{}
	// Display auto submit toolbar.
	AutoSubmitToolbar interface{}
	// Identifies a specific application resource in an IDP initiated SSO scenario.
	DefaultRelayState interface{}
	// description of application.
	Description interface{}
	// Identifies the location where the SAML response is intended to be sent inside of the SAML assertion.
	Destination interface{}
	// Determines the digest algorithm used to digitally sign the SAML assertion and response.
	DigestAlgorithm interface{}
	// features enabled.
	Features interface{}
	// Do not display application icon on mobile app.
	HideIos interface{}
	// Do not display application icon to users
	HideWeb interface{}
	// Prompt user to re-authenticate if SP asks for it.
	HonorForceAuthn interface{}
	// id of application.
	Id interface{}
	// SAML issuer ID.
	IdpIssuer interface{}
	// Certificate key ID.
	KeyId interface{}
	// label of application.
	Label interface{}
	LabelPrefix interface{}
	// name of application.
	Name interface{}
	// The location where the app may present the SAML assertion.
	Recipient interface{}
	// Denotes whether the request is compressed or not.
	RequestCompressed interface{}
	// Determines whether the SAML auth response message is digitally signed.
	ResponseSigned interface{}
	// Signature algorithm used ot digitally sign the assertion and response.
	SignatureAlgorithm interface{}
	// SAML service provider issuer.
	SpIssuer interface{}
	// Single Sign on Url.
	SsoUrl interface{}
	// status of application.
	Status interface{}
	// Identifies the SAML processing rules.
	SubjectNameIdFormat interface{}
	// Template for app user's username when a user is assigned to the app.
	SubjectNameIdTemplate interface{}
	// Username template.
	UserNameTemplate interface{}
	// Username template suffix.
	UserNameTemplateSuffix interface{}
	// Username template type.
	UserNameTemplateType interface{}
}
