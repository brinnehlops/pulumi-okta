// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package app

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Use this data source to retrieve the collaborators for a given repository.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-okta/blob/master/website/docs/d/app.html.markdown.
func LookupApp(ctx *pulumi.Context, args *GetAppArgs) (*GetAppResult, error) {
	inputs := make(map[string]interface{})
	if args != nil {
		inputs["activeOnly"] = args.ActiveOnly
		inputs["id"] = args.Id
		inputs["label"] = args.Label
		inputs["labelPrefix"] = args.LabelPrefix
	}
	outputs, err := ctx.Invoke("okta:app/getApp:getApp", inputs)
	if err != nil {
		return nil, err
	}
	return &GetAppResult{
		ActiveOnly: outputs["activeOnly"],
		Description: outputs["description"],
		Id: outputs["id"],
		Label: outputs["label"],
		LabelPrefix: outputs["labelPrefix"],
		Name: outputs["name"],
		Status: outputs["status"],
	}, nil
}

// A collection of arguments for invoking getApp.
type GetAppArgs struct {
	// tells the provider to query for only `ACTIVE` applications.
	ActiveOnly interface{}
	// `id` of application to retrieve, conflicts with `label` and `labelPrefix`.
	Id interface{}
	// The label of the app to retrieve, conflicts with `labelPrefix` and `id`.
	Label interface{}
	// Label prefix of the app to retrieve, conflicts with `label` and `id`. This will tell the provider to do a `starts with` query as opposed to an `equals` query.
	LabelPrefix interface{}
}

// A collection of values returned by getApp.
type GetAppResult struct {
	ActiveOnly interface{}
	// `description` of application.
	Description interface{}
	// `id` of application.
	Id interface{}
	// `label` of application.
	Label interface{}
	LabelPrefix interface{}
	// `name` of application.
	Name interface{}
	// `status` of application.
	Status interface{}
}
