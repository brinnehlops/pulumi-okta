// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package app

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates an Application User.
// 
// This resource allows you to create and configure an Application User.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-okta/blob/master/website/docs/r/app_user.html.markdown.
type User struct {
	s *pulumi.ResourceState
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOpt) (*User, error) {
	if args == nil || args.AppId == nil {
		return nil, errors.New("missing required argument 'AppId'")
	}
	if args == nil || args.UserId == nil {
		return nil, errors.New("missing required argument 'UserId'")
	}
	if args == nil || args.Username == nil {
		return nil, errors.New("missing required argument 'Username'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["appId"] = nil
		inputs["password"] = nil
		inputs["profile"] = nil
		inputs["userId"] = nil
		inputs["username"] = nil
	} else {
		inputs["appId"] = args.AppId
		inputs["password"] = args.Password
		inputs["profile"] = args.Profile
		inputs["userId"] = args.UserId
		inputs["username"] = args.Username
	}
	s, err := ctx.RegisterResource("okta:app/user:User", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &User{s: s}, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.ID, state *UserState, opts ...pulumi.ResourceOpt) (*User, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["appId"] = state.AppId
		inputs["password"] = state.Password
		inputs["profile"] = state.Profile
		inputs["userId"] = state.UserId
		inputs["username"] = state.Username
	}
	s, err := ctx.ReadResource("okta:app/user:User", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &User{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *User) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *User) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// App to associate user with.
func (r *User) AppId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["appId"])
}

// The password to use.
func (r *User) Password() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["password"])
}

// The JSON profile of the App User.
func (r *User) Profile() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["profile"])
}

// User to associate the application with.
func (r *User) UserId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["userId"])
}

// The username to use for the app user.
func (r *User) Username() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["username"])
}

// Input properties used for looking up and filtering User resources.
type UserState struct {
	// App to associate user with.
	AppId interface{}
	// The password to use.
	Password interface{}
	// The JSON profile of the App User.
	Profile interface{}
	// User to associate the application with.
	UserId interface{}
	// The username to use for the app user.
	Username interface{}
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// App to associate user with.
	AppId interface{}
	// The password to use.
	Password interface{}
	// The JSON profile of the App User.
	Profile interface{}
	// User to associate the application with.
	UserId interface{}
	// The username to use for the app user.
	Username interface{}
}
