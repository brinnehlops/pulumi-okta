// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package app

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Assigns a group to an application.
// 
// This resource allows you to create an App Group assignment.
//
// > This content is derived from https://github.com/articulate/terraform-provider-okta/blob/master/website/docs/r/app_group_assignment.html.markdown.
type GroupAssignment struct {
	s *pulumi.ResourceState
}

// NewGroupAssignment registers a new resource with the given unique name, arguments, and options.
func NewGroupAssignment(ctx *pulumi.Context,
	name string, args *GroupAssignmentArgs, opts ...pulumi.ResourceOpt) (*GroupAssignment, error) {
	if args == nil || args.AppId == nil {
		return nil, errors.New("missing required argument 'AppId'")
	}
	if args == nil || args.GroupId == nil {
		return nil, errors.New("missing required argument 'GroupId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["appId"] = nil
		inputs["groupId"] = nil
		inputs["priority"] = nil
		inputs["profile"] = nil
	} else {
		inputs["appId"] = args.AppId
		inputs["groupId"] = args.GroupId
		inputs["priority"] = args.Priority
		inputs["profile"] = args.Profile
	}
	s, err := ctx.RegisterResource("okta:app/groupAssignment:GroupAssignment", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GroupAssignment{s: s}, nil
}

// GetGroupAssignment gets an existing GroupAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupAssignment(ctx *pulumi.Context,
	name string, id pulumi.ID, state *GroupAssignmentState, opts ...pulumi.ResourceOpt) (*GroupAssignment, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["appId"] = state.AppId
		inputs["groupId"] = state.GroupId
		inputs["priority"] = state.Priority
		inputs["profile"] = state.Profile
	}
	s, err := ctx.ReadResource("okta:app/groupAssignment:GroupAssignment", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GroupAssignment{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *GroupAssignment) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *GroupAssignment) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The ID of the application to assign a group to.
func (r *GroupAssignment) AppId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["appId"])
}

// The ID of the group to assign the app to.
func (r *GroupAssignment) GroupId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["groupId"])
}

func (r *GroupAssignment) Priority() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["priority"])
}

func (r *GroupAssignment) Profile() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["profile"])
}

// Input properties used for looking up and filtering GroupAssignment resources.
type GroupAssignmentState struct {
	// The ID of the application to assign a group to.
	AppId interface{}
	// The ID of the group to assign the app to.
	GroupId interface{}
	Priority interface{}
	Profile interface{}
}

// The set of arguments for constructing a GroupAssignment resource.
type GroupAssignmentArgs struct {
	// The ID of the application to assign a group to.
	AppId interface{}
	// The ID of the group to assign the app to.
	GroupId interface{}
	Priority interface{}
	Profile interface{}
}
