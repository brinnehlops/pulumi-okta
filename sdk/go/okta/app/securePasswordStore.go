// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package app

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates a Secure Password Store Application.
// 
// This resource allows you to create and configure a Secure Password Store Application.
//
// > This content is derived from https://github.com/articulate/terraform-provider-okta/blob/master/website/docs/r/app_secure_password_store.html.markdown.
type SecurePasswordStore struct {
	s *pulumi.ResourceState
}

// NewSecurePasswordStore registers a new resource with the given unique name, arguments, and options.
func NewSecurePasswordStore(ctx *pulumi.Context,
	name string, args *SecurePasswordStoreArgs, opts ...pulumi.ResourceOpt) (*SecurePasswordStore, error) {
	if args == nil || args.Label == nil {
		return nil, errors.New("missing required argument 'Label'")
	}
	if args == nil || args.PasswordField == nil {
		return nil, errors.New("missing required argument 'PasswordField'")
	}
	if args == nil || args.Url == nil {
		return nil, errors.New("missing required argument 'Url'")
	}
	if args == nil || args.UsernameField == nil {
		return nil, errors.New("missing required argument 'UsernameField'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accessibilityErrorRedirectUrl"] = nil
		inputs["accessibilitySelfService"] = nil
		inputs["autoSubmitToolbar"] = nil
		inputs["credentialsScheme"] = nil
		inputs["groups"] = nil
		inputs["hideIos"] = nil
		inputs["hideWeb"] = nil
		inputs["label"] = nil
		inputs["optionalField1"] = nil
		inputs["optionalField1Value"] = nil
		inputs["optionalField2"] = nil
		inputs["optionalField2Value"] = nil
		inputs["optionalField3"] = nil
		inputs["optionalField3Value"] = nil
		inputs["passwordField"] = nil
		inputs["revealPassword"] = nil
		inputs["sharedPassword"] = nil
		inputs["sharedUsername"] = nil
		inputs["status"] = nil
		inputs["url"] = nil
		inputs["usernameField"] = nil
		inputs["users"] = nil
	} else {
		inputs["accessibilityErrorRedirectUrl"] = args.AccessibilityErrorRedirectUrl
		inputs["accessibilitySelfService"] = args.AccessibilitySelfService
		inputs["autoSubmitToolbar"] = args.AutoSubmitToolbar
		inputs["credentialsScheme"] = args.CredentialsScheme
		inputs["groups"] = args.Groups
		inputs["hideIos"] = args.HideIos
		inputs["hideWeb"] = args.HideWeb
		inputs["label"] = args.Label
		inputs["optionalField1"] = args.OptionalField1
		inputs["optionalField1Value"] = args.OptionalField1Value
		inputs["optionalField2"] = args.OptionalField2
		inputs["optionalField2Value"] = args.OptionalField2Value
		inputs["optionalField3"] = args.OptionalField3
		inputs["optionalField3Value"] = args.OptionalField3Value
		inputs["passwordField"] = args.PasswordField
		inputs["revealPassword"] = args.RevealPassword
		inputs["sharedPassword"] = args.SharedPassword
		inputs["sharedUsername"] = args.SharedUsername
		inputs["status"] = args.Status
		inputs["url"] = args.Url
		inputs["usernameField"] = args.UsernameField
		inputs["users"] = args.Users
	}
	inputs["name"] = nil
	inputs["signOnMode"] = nil
	inputs["userNameTemplate"] = nil
	inputs["userNameTemplateType"] = nil
	s, err := ctx.RegisterResource("okta:app/securePasswordStore:SecurePasswordStore", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecurePasswordStore{s: s}, nil
}

// GetSecurePasswordStore gets an existing SecurePasswordStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurePasswordStore(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SecurePasswordStoreState, opts ...pulumi.ResourceOpt) (*SecurePasswordStore, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessibilityErrorRedirectUrl"] = state.AccessibilityErrorRedirectUrl
		inputs["accessibilitySelfService"] = state.AccessibilitySelfService
		inputs["autoSubmitToolbar"] = state.AutoSubmitToolbar
		inputs["credentialsScheme"] = state.CredentialsScheme
		inputs["groups"] = state.Groups
		inputs["hideIos"] = state.HideIos
		inputs["hideWeb"] = state.HideWeb
		inputs["label"] = state.Label
		inputs["name"] = state.Name
		inputs["optionalField1"] = state.OptionalField1
		inputs["optionalField1Value"] = state.OptionalField1Value
		inputs["optionalField2"] = state.OptionalField2
		inputs["optionalField2Value"] = state.OptionalField2Value
		inputs["optionalField3"] = state.OptionalField3
		inputs["optionalField3Value"] = state.OptionalField3Value
		inputs["passwordField"] = state.PasswordField
		inputs["revealPassword"] = state.RevealPassword
		inputs["sharedPassword"] = state.SharedPassword
		inputs["sharedUsername"] = state.SharedUsername
		inputs["signOnMode"] = state.SignOnMode
		inputs["status"] = state.Status
		inputs["url"] = state.Url
		inputs["userNameTemplate"] = state.UserNameTemplate
		inputs["userNameTemplateType"] = state.UserNameTemplateType
		inputs["usernameField"] = state.UsernameField
		inputs["users"] = state.Users
	}
	s, err := ctx.ReadResource("okta:app/securePasswordStore:SecurePasswordStore", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecurePasswordStore{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SecurePasswordStore) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SecurePasswordStore) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Custom error page URL.
func (r *SecurePasswordStore) AccessibilityErrorRedirectUrl() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["accessibilityErrorRedirectUrl"])
}

// Enable self service. By default it is `false`.
func (r *SecurePasswordStore) AccessibilitySelfService() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["accessibilitySelfService"])
}

// Display auto submit toolbar.
func (r *SecurePasswordStore) AutoSubmitToolbar() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["autoSubmitToolbar"])
}

// Application credentials scheme. Can be set to `"EDIT_USERNAME_AND_PASSWORD"`, `"ADMIN_SETS_CREDENTIALS"`, `"EDIT_PASSWORD_ONLY"`, `"EXTERNAL_PASSWORD_SYNC"`, or `"SHARED_USERNAME_AND_PASSWORD"`.
func (r *SecurePasswordStore) CredentialsScheme() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["credentialsScheme"])
}

// Groups associated with the application. See `app.GroupAssignment` for a more flexible approach.
func (r *SecurePasswordStore) Groups() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["groups"])
}

// Do not display application icon on mobile app.
func (r *SecurePasswordStore) HideIos() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["hideIos"])
}

// Do not display application icon to users.
func (r *SecurePasswordStore) HideWeb() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["hideWeb"])
}

// The display name of the Application.
func (r *SecurePasswordStore) Label() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["label"])
}

// Name assigned to the application by Okta.
func (r *SecurePasswordStore) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Name of optional param in the login form.
func (r *SecurePasswordStore) OptionalField1() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["optionalField1"])
}

// Name of optional value in the login form.
func (r *SecurePasswordStore) OptionalField1Value() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["optionalField1Value"])
}

// Name of optional param in the login form.
func (r *SecurePasswordStore) OptionalField2() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["optionalField2"])
}

// Name of optional value in the login form.
func (r *SecurePasswordStore) OptionalField2Value() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["optionalField2Value"])
}

// Name of optional param in the login form.
func (r *SecurePasswordStore) OptionalField3() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["optionalField3"])
}

// Name of optional value in the login form.
func (r *SecurePasswordStore) OptionalField3Value() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["optionalField3Value"])
}

// Login password field.
func (r *SecurePasswordStore) PasswordField() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["passwordField"])
}

// Allow user to reveal password.
func (r *SecurePasswordStore) RevealPassword() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["revealPassword"])
}

// Shared password, required for certain schemes.
func (r *SecurePasswordStore) SharedPassword() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sharedPassword"])
}

// Shared username, required for certain schemes.
func (r *SecurePasswordStore) SharedUsername() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sharedUsername"])
}

// Sign on mode of application.
func (r *SecurePasswordStore) SignOnMode() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["signOnMode"])
}

// Status of application. By default it is `"ACTIVE"`.
func (r *SecurePasswordStore) Status() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["status"])
}

// Login URL.
func (r *SecurePasswordStore) Url() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["url"])
}

// The default username assigned to each user.
func (r *SecurePasswordStore) UserNameTemplate() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["userNameTemplate"])
}

// The Username template type.
func (r *SecurePasswordStore) UserNameTemplateType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["userNameTemplateType"])
}

// Login username field.
func (r *SecurePasswordStore) UsernameField() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["usernameField"])
}

// The users assigned to the application. See `app.User` for a more flexible approach.
func (r *SecurePasswordStore) Users() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["users"])
}

// Input properties used for looking up and filtering SecurePasswordStore resources.
type SecurePasswordStoreState struct {
	// Custom error page URL.
	AccessibilityErrorRedirectUrl interface{}
	// Enable self service. By default it is `false`.
	AccessibilitySelfService interface{}
	// Display auto submit toolbar.
	AutoSubmitToolbar interface{}
	// Application credentials scheme. Can be set to `"EDIT_USERNAME_AND_PASSWORD"`, `"ADMIN_SETS_CREDENTIALS"`, `"EDIT_PASSWORD_ONLY"`, `"EXTERNAL_PASSWORD_SYNC"`, or `"SHARED_USERNAME_AND_PASSWORD"`.
	CredentialsScheme interface{}
	// Groups associated with the application. See `app.GroupAssignment` for a more flexible approach.
	Groups interface{}
	// Do not display application icon on mobile app.
	HideIos interface{}
	// Do not display application icon to users.
	HideWeb interface{}
	// The display name of the Application.
	Label interface{}
	// Name assigned to the application by Okta.
	Name interface{}
	// Name of optional param in the login form.
	OptionalField1 interface{}
	// Name of optional value in the login form.
	OptionalField1Value interface{}
	// Name of optional param in the login form.
	OptionalField2 interface{}
	// Name of optional value in the login form.
	OptionalField2Value interface{}
	// Name of optional param in the login form.
	OptionalField3 interface{}
	// Name of optional value in the login form.
	OptionalField3Value interface{}
	// Login password field.
	PasswordField interface{}
	// Allow user to reveal password.
	RevealPassword interface{}
	// Shared password, required for certain schemes.
	SharedPassword interface{}
	// Shared username, required for certain schemes.
	SharedUsername interface{}
	// Sign on mode of application.
	SignOnMode interface{}
	// Status of application. By default it is `"ACTIVE"`.
	Status interface{}
	// Login URL.
	Url interface{}
	// The default username assigned to each user.
	UserNameTemplate interface{}
	// The Username template type.
	UserNameTemplateType interface{}
	// Login username field.
	UsernameField interface{}
	// The users assigned to the application. See `app.User` for a more flexible approach.
	Users interface{}
}

// The set of arguments for constructing a SecurePasswordStore resource.
type SecurePasswordStoreArgs struct {
	// Custom error page URL.
	AccessibilityErrorRedirectUrl interface{}
	// Enable self service. By default it is `false`.
	AccessibilitySelfService interface{}
	// Display auto submit toolbar.
	AutoSubmitToolbar interface{}
	// Application credentials scheme. Can be set to `"EDIT_USERNAME_AND_PASSWORD"`, `"ADMIN_SETS_CREDENTIALS"`, `"EDIT_PASSWORD_ONLY"`, `"EXTERNAL_PASSWORD_SYNC"`, or `"SHARED_USERNAME_AND_PASSWORD"`.
	CredentialsScheme interface{}
	// Groups associated with the application. See `app.GroupAssignment` for a more flexible approach.
	Groups interface{}
	// Do not display application icon on mobile app.
	HideIos interface{}
	// Do not display application icon to users.
	HideWeb interface{}
	// The display name of the Application.
	Label interface{}
	// Name of optional param in the login form.
	OptionalField1 interface{}
	// Name of optional value in the login form.
	OptionalField1Value interface{}
	// Name of optional param in the login form.
	OptionalField2 interface{}
	// Name of optional value in the login form.
	OptionalField2Value interface{}
	// Name of optional param in the login form.
	OptionalField3 interface{}
	// Name of optional value in the login form.
	OptionalField3Value interface{}
	// Login password field.
	PasswordField interface{}
	// Allow user to reveal password.
	RevealPassword interface{}
	// Shared password, required for certain schemes.
	SharedPassword interface{}
	// Shared username, required for certain schemes.
	SharedUsername interface{}
	// Status of application. By default it is `"ACTIVE"`.
	Status interface{}
	// Login URL.
	Url interface{}
	// Login username field.
	UsernameField interface{}
	// The users assigned to the application. See `app.User` for a more flexible approach.
	Users interface{}
}
