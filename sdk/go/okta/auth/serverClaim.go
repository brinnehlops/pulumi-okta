// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package auth

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates an Authorization Server Claim.
// 
// This resource allows you to create and configure an Authorization Server Claim.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-okta/blob/master/website/docs/r/auth_server_claim.html.markdown.
type ServerClaim struct {
	s *pulumi.ResourceState
}

// NewServerClaim registers a new resource with the given unique name, arguments, and options.
func NewServerClaim(ctx *pulumi.Context,
	name string, args *ServerClaimArgs, opts ...pulumi.ResourceOpt) (*ServerClaim, error) {
	if args == nil || args.AuthServerId == nil {
		return nil, errors.New("missing required argument 'AuthServerId'")
	}
	if args == nil || args.ClaimType == nil {
		return nil, errors.New("missing required argument 'ClaimType'")
	}
	if args == nil || args.Value == nil {
		return nil, errors.New("missing required argument 'Value'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["alwaysIncludeInToken"] = nil
		inputs["authServerId"] = nil
		inputs["claimType"] = nil
		inputs["groupFilterType"] = nil
		inputs["name"] = nil
		inputs["scopes"] = nil
		inputs["status"] = nil
		inputs["value"] = nil
		inputs["valueType"] = nil
	} else {
		inputs["alwaysIncludeInToken"] = args.AlwaysIncludeInToken
		inputs["authServerId"] = args.AuthServerId
		inputs["claimType"] = args.ClaimType
		inputs["groupFilterType"] = args.GroupFilterType
		inputs["name"] = args.Name
		inputs["scopes"] = args.Scopes
		inputs["status"] = args.Status
		inputs["value"] = args.Value
		inputs["valueType"] = args.ValueType
	}
	s, err := ctx.RegisterResource("okta:auth/serverClaim:ServerClaim", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ServerClaim{s: s}, nil
}

// GetServerClaim gets an existing ServerClaim resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerClaim(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ServerClaimState, opts ...pulumi.ResourceOpt) (*ServerClaim, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["alwaysIncludeInToken"] = state.AlwaysIncludeInToken
		inputs["authServerId"] = state.AuthServerId
		inputs["claimType"] = state.ClaimType
		inputs["groupFilterType"] = state.GroupFilterType
		inputs["name"] = state.Name
		inputs["scopes"] = state.Scopes
		inputs["status"] = state.Status
		inputs["value"] = state.Value
		inputs["valueType"] = state.ValueType
	}
	s, err := ctx.ReadResource("okta:auth/serverClaim:ServerClaim", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ServerClaim{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ServerClaim) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ServerClaim) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Specifies whether to include claims in token, by default is is set to `true`.
func (r *ServerClaim) AlwaysIncludeInToken() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["alwaysIncludeInToken"])
}

// The Application's display name.
func (r *ServerClaim) AuthServerId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["authServerId"])
}

// Specifies whether the claim is for an access token `"RESOURCE"` or ID token `"IDENTITY"`.
func (r *ServerClaim) ClaimType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["claimType"])
}

// Specifies the type of group filter if `valueType` is `"GROUPS"`. Can be set to one of the following `"STARTS_WITH"`, `"EQUALS"`, `"CONTAINS"`, `"REGEX"`.
func (r *ServerClaim) GroupFilterType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["groupFilterType"])
}

// The name of the claim.
func (r *ServerClaim) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The list of scopes the auth server claim is tied to.
func (r *ServerClaim) Scopes() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["scopes"])
}

// The status of the application. It defaults to `"ACTIVE"`.
func (r *ServerClaim) Status() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["status"])
}

// The value of the claim.
func (r *ServerClaim) Value() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["value"])
}

// The type of value of the claim. It can be set to `"EXPRESSION"` or `"GROUPS"`. It defaults to `"EXPRESSION"`.
func (r *ServerClaim) ValueType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["valueType"])
}

// Input properties used for looking up and filtering ServerClaim resources.
type ServerClaimState struct {
	// Specifies whether to include claims in token, by default is is set to `true`.
	AlwaysIncludeInToken interface{}
	// The Application's display name.
	AuthServerId interface{}
	// Specifies whether the claim is for an access token `"RESOURCE"` or ID token `"IDENTITY"`.
	ClaimType interface{}
	// Specifies the type of group filter if `valueType` is `"GROUPS"`. Can be set to one of the following `"STARTS_WITH"`, `"EQUALS"`, `"CONTAINS"`, `"REGEX"`.
	GroupFilterType interface{}
	// The name of the claim.
	Name interface{}
	// The list of scopes the auth server claim is tied to.
	Scopes interface{}
	// The status of the application. It defaults to `"ACTIVE"`.
	Status interface{}
	// The value of the claim.
	Value interface{}
	// The type of value of the claim. It can be set to `"EXPRESSION"` or `"GROUPS"`. It defaults to `"EXPRESSION"`.
	ValueType interface{}
}

// The set of arguments for constructing a ServerClaim resource.
type ServerClaimArgs struct {
	// Specifies whether to include claims in token, by default is is set to `true`.
	AlwaysIncludeInToken interface{}
	// The Application's display name.
	AuthServerId interface{}
	// Specifies whether the claim is for an access token `"RESOURCE"` or ID token `"IDENTITY"`.
	ClaimType interface{}
	// Specifies the type of group filter if `valueType` is `"GROUPS"`. Can be set to one of the following `"STARTS_WITH"`, `"EQUALS"`, `"CONTAINS"`, `"REGEX"`.
	GroupFilterType interface{}
	// The name of the claim.
	Name interface{}
	// The list of scopes the auth server claim is tied to.
	Scopes interface{}
	// The status of the application. It defaults to `"ACTIVE"`.
	Status interface{}
	// The value of the claim.
	Value interface{}
	// The type of value of the claim. It can be set to `"EXPRESSION"` or `"GROUPS"`. It defaults to `"EXPRESSION"`.
	ValueType interface{}
}
