// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package auth

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates an Authorization Server Policy Rule.
// 
// This resource allows you to create and configure an Authorization Server Policy Rule.
//
// > This content is derived from https://github.com/articulate/terraform-provider-okta/blob/master/website/docs/r/auth_server_policy_rule.html.markdown.
type ServerPolicyClaim struct {
	s *pulumi.ResourceState
}

// NewServerPolicyClaim registers a new resource with the given unique name, arguments, and options.
func NewServerPolicyClaim(ctx *pulumi.Context,
	name string, args *ServerPolicyClaimArgs, opts ...pulumi.ResourceOpt) (*ServerPolicyClaim, error) {
	if args == nil || args.AuthServerId == nil {
		return nil, errors.New("missing required argument 'AuthServerId'")
	}
	if args == nil || args.GrantTypeWhitelists == nil {
		return nil, errors.New("missing required argument 'GrantTypeWhitelists'")
	}
	if args == nil || args.PolicyId == nil {
		return nil, errors.New("missing required argument 'PolicyId'")
	}
	if args == nil || args.Priority == nil {
		return nil, errors.New("missing required argument 'Priority'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accessTokenLifetimeMinutes"] = nil
		inputs["authServerId"] = nil
		inputs["grantTypeWhitelists"] = nil
		inputs["groupBlacklists"] = nil
		inputs["groupWhitelists"] = nil
		inputs["inlineHookId"] = nil
		inputs["name"] = nil
		inputs["policyId"] = nil
		inputs["priority"] = nil
		inputs["refreshTokenLifetimeMinutes"] = nil
		inputs["refreshTokenWindowMinutes"] = nil
		inputs["scopeWhitelists"] = nil
		inputs["status"] = nil
		inputs["type"] = nil
		inputs["userBlacklists"] = nil
		inputs["userWhitelists"] = nil
	} else {
		inputs["accessTokenLifetimeMinutes"] = args.AccessTokenLifetimeMinutes
		inputs["authServerId"] = args.AuthServerId
		inputs["grantTypeWhitelists"] = args.GrantTypeWhitelists
		inputs["groupBlacklists"] = args.GroupBlacklists
		inputs["groupWhitelists"] = args.GroupWhitelists
		inputs["inlineHookId"] = args.InlineHookId
		inputs["name"] = args.Name
		inputs["policyId"] = args.PolicyId
		inputs["priority"] = args.Priority
		inputs["refreshTokenLifetimeMinutes"] = args.RefreshTokenLifetimeMinutes
		inputs["refreshTokenWindowMinutes"] = args.RefreshTokenWindowMinutes
		inputs["scopeWhitelists"] = args.ScopeWhitelists
		inputs["status"] = args.Status
		inputs["type"] = args.Type
		inputs["userBlacklists"] = args.UserBlacklists
		inputs["userWhitelists"] = args.UserWhitelists
	}
	s, err := ctx.RegisterResource("okta:auth/serverPolicyClaim:ServerPolicyClaim", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ServerPolicyClaim{s: s}, nil
}

// GetServerPolicyClaim gets an existing ServerPolicyClaim resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerPolicyClaim(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ServerPolicyClaimState, opts ...pulumi.ResourceOpt) (*ServerPolicyClaim, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessTokenLifetimeMinutes"] = state.AccessTokenLifetimeMinutes
		inputs["authServerId"] = state.AuthServerId
		inputs["grantTypeWhitelists"] = state.GrantTypeWhitelists
		inputs["groupBlacklists"] = state.GroupBlacklists
		inputs["groupWhitelists"] = state.GroupWhitelists
		inputs["inlineHookId"] = state.InlineHookId
		inputs["name"] = state.Name
		inputs["policyId"] = state.PolicyId
		inputs["priority"] = state.Priority
		inputs["refreshTokenLifetimeMinutes"] = state.RefreshTokenLifetimeMinutes
		inputs["refreshTokenWindowMinutes"] = state.RefreshTokenWindowMinutes
		inputs["scopeWhitelists"] = state.ScopeWhitelists
		inputs["status"] = state.Status
		inputs["type"] = state.Type
		inputs["userBlacklists"] = state.UserBlacklists
		inputs["userWhitelists"] = state.UserWhitelists
	}
	s, err := ctx.ReadResource("okta:auth/serverPolicyClaim:ServerPolicyClaim", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ServerPolicyClaim{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ServerPolicyClaim) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ServerPolicyClaim) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Lifetime of access token. Can be set to a value between 5 and 1440.
func (r *ServerPolicyClaim) AccessTokenLifetimeMinutes() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["accessTokenLifetimeMinutes"])
}

// Auth Server ID.
func (r *ServerPolicyClaim) AuthServerId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["authServerId"])
}

// Accepted grant type values, `"authorizationCode"`, `"implicit"`, `"password"`
func (r *ServerPolicyClaim) GrantTypeWhitelists() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["grantTypeWhitelists"])
}

func (r *ServerPolicyClaim) GroupBlacklists() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["groupBlacklists"])
}

func (r *ServerPolicyClaim) GroupWhitelists() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["groupWhitelists"])
}

// The ID of the inline token to trigger.
func (r *ServerPolicyClaim) InlineHookId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["inlineHookId"])
}

// Auth Server Policy Rule name.
func (r *ServerPolicyClaim) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Auth Server Policy ID.
func (r *ServerPolicyClaim) PolicyId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["policyId"])
}

// Priority of the auth server policy rule.
func (r *ServerPolicyClaim) Priority() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["priority"])
}

// Lifetime of refresh token.
func (r *ServerPolicyClaim) RefreshTokenLifetimeMinutes() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["refreshTokenLifetimeMinutes"])
}

func (r *ServerPolicyClaim) RefreshTokenWindowMinutes() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["refreshTokenWindowMinutes"])
}

// Scopes allowed for this policy rule. They can be whitelisted by name or all can be whitelisted with `"*"`.
func (r *ServerPolicyClaim) ScopeWhitelists() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["scopeWhitelists"])
}

// The status of the Auth Server Policy Rule.
func (r *ServerPolicyClaim) Status() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["status"])
}

// The type of the Auth Server Policy Rule.
func (r *ServerPolicyClaim) Type() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["type"])
}

func (r *ServerPolicyClaim) UserBlacklists() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["userBlacklists"])
}

func (r *ServerPolicyClaim) UserWhitelists() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["userWhitelists"])
}

// Input properties used for looking up and filtering ServerPolicyClaim resources.
type ServerPolicyClaimState struct {
	// Lifetime of access token. Can be set to a value between 5 and 1440.
	AccessTokenLifetimeMinutes interface{}
	// Auth Server ID.
	AuthServerId interface{}
	// Accepted grant type values, `"authorizationCode"`, `"implicit"`, `"password"`
	GrantTypeWhitelists interface{}
	GroupBlacklists interface{}
	GroupWhitelists interface{}
	// The ID of the inline token to trigger.
	InlineHookId interface{}
	// Auth Server Policy Rule name.
	Name interface{}
	// Auth Server Policy ID.
	PolicyId interface{}
	// Priority of the auth server policy rule.
	Priority interface{}
	// Lifetime of refresh token.
	RefreshTokenLifetimeMinutes interface{}
	RefreshTokenWindowMinutes interface{}
	// Scopes allowed for this policy rule. They can be whitelisted by name or all can be whitelisted with `"*"`.
	ScopeWhitelists interface{}
	// The status of the Auth Server Policy Rule.
	Status interface{}
	// The type of the Auth Server Policy Rule.
	Type interface{}
	UserBlacklists interface{}
	UserWhitelists interface{}
}

// The set of arguments for constructing a ServerPolicyClaim resource.
type ServerPolicyClaimArgs struct {
	// Lifetime of access token. Can be set to a value between 5 and 1440.
	AccessTokenLifetimeMinutes interface{}
	// Auth Server ID.
	AuthServerId interface{}
	// Accepted grant type values, `"authorizationCode"`, `"implicit"`, `"password"`
	GrantTypeWhitelists interface{}
	GroupBlacklists interface{}
	GroupWhitelists interface{}
	// The ID of the inline token to trigger.
	InlineHookId interface{}
	// Auth Server Policy Rule name.
	Name interface{}
	// Auth Server Policy ID.
	PolicyId interface{}
	// Priority of the auth server policy rule.
	Priority interface{}
	// Lifetime of refresh token.
	RefreshTokenLifetimeMinutes interface{}
	RefreshTokenWindowMinutes interface{}
	// Scopes allowed for this policy rule. They can be whitelisted by name or all can be whitelisted with `"*"`.
	ScopeWhitelists interface{}
	// The status of the Auth Server Policy Rule.
	Status interface{}
	// The type of the Auth Server Policy Rule.
	Type interface{}
	UserBlacklists interface{}
	UserWhitelists interface{}
}
