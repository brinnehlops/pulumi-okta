// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package auth

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates an Authorization Server Scope.
// 
// This resource allows you to create and configure an Authorization Server Scope.
//
// > This content is derived from https://github.com/articulate/terraform-provider-okta/blob/master/website/docs/r/auth_server_scope.html.markdown.
type ServerScope struct {
	s *pulumi.ResourceState
}

// NewServerScope registers a new resource with the given unique name, arguments, and options.
func NewServerScope(ctx *pulumi.Context,
	name string, args *ServerScopeArgs, opts ...pulumi.ResourceOpt) (*ServerScope, error) {
	if args == nil || args.AuthServerId == nil {
		return nil, errors.New("missing required argument 'AuthServerId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["authServerId"] = nil
		inputs["consent"] = nil
		inputs["default"] = nil
		inputs["description"] = nil
		inputs["metadataPublish"] = nil
		inputs["name"] = nil
	} else {
		inputs["authServerId"] = args.AuthServerId
		inputs["consent"] = args.Consent
		inputs["default"] = args.Default
		inputs["description"] = args.Description
		inputs["metadataPublish"] = args.MetadataPublish
		inputs["name"] = args.Name
	}
	s, err := ctx.RegisterResource("okta:auth/serverScope:ServerScope", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ServerScope{s: s}, nil
}

// GetServerScope gets an existing ServerScope resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerScope(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ServerScopeState, opts ...pulumi.ResourceOpt) (*ServerScope, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["authServerId"] = state.AuthServerId
		inputs["consent"] = state.Consent
		inputs["default"] = state.Default
		inputs["description"] = state.Description
		inputs["metadataPublish"] = state.MetadataPublish
		inputs["name"] = state.Name
	}
	s, err := ctx.ReadResource("okta:auth/serverScope:ServerScope", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ServerScope{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ServerScope) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ServerScope) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Auth Server ID.
func (r *ServerScope) AuthServerId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["authServerId"])
}

// Indicates whether a consent dialog is needed for the scope. It can be set to `"REQUIRED"` or `"IMPLICIT"`.
func (r *ServerScope) Consent() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["consent"])
}

// A default scope will be returned in an access token when the client omits the scope parameter in a token request, provided this scope is allowed as part of the access policy rule.
func (r *ServerScope) Default() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["default"])
}

// Description of the Auth Server Scope.
func (r *ServerScope) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// Whether to publish metadata or not. It can be set to `"ALL_CLIENTS"` or `"NO_CLIENTS"`.
func (r *ServerScope) MetadataPublish() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["metadataPublish"])
}

// Auth Server scope name.
func (r *ServerScope) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Input properties used for looking up and filtering ServerScope resources.
type ServerScopeState struct {
	// Auth Server ID.
	AuthServerId interface{}
	// Indicates whether a consent dialog is needed for the scope. It can be set to `"REQUIRED"` or `"IMPLICIT"`.
	Consent interface{}
	// A default scope will be returned in an access token when the client omits the scope parameter in a token request, provided this scope is allowed as part of the access policy rule.
	Default interface{}
	// Description of the Auth Server Scope.
	Description interface{}
	// Whether to publish metadata or not. It can be set to `"ALL_CLIENTS"` or `"NO_CLIENTS"`.
	MetadataPublish interface{}
	// Auth Server scope name.
	Name interface{}
}

// The set of arguments for constructing a ServerScope resource.
type ServerScopeArgs struct {
	// Auth Server ID.
	AuthServerId interface{}
	// Indicates whether a consent dialog is needed for the scope. It can be set to `"REQUIRED"` or `"IMPLICIT"`.
	Consent interface{}
	// A default scope will be returned in an access token when the client omits the scope parameter in a token request, provided this scope is allowed as part of the access policy rule.
	Default interface{}
	// Description of the Auth Server Scope.
	Description interface{}
	// Whether to publish metadata or not. It can be set to `"ALL_CLIENTS"` or `"NO_CLIENTS"`.
	MetadataPublish interface{}
	// Auth Server scope name.
	Name interface{}
}
