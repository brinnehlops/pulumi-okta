// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package deprecated

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type OauthApp struct {
	s *pulumi.ResourceState
}

// NewOauthApp registers a new resource with the given unique name, arguments, and options.
func NewOauthApp(ctx *pulumi.Context,
	name string, args *OauthAppArgs, opts ...pulumi.ResourceOpt) (*OauthApp, error) {
	if args == nil || args.Label == nil {
		return nil, errors.New("missing required argument 'Label'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["autoKeyRotation"] = nil
		inputs["autoSubmitToolbar"] = nil
		inputs["clientBasicSecret"] = nil
		inputs["clientUri"] = nil
		inputs["consentMethod"] = nil
		inputs["customClientId"] = nil
		inputs["grantTypes"] = nil
		inputs["groups"] = nil
		inputs["hideIos"] = nil
		inputs["hideWeb"] = nil
		inputs["issuerMode"] = nil
		inputs["label"] = nil
		inputs["loginUri"] = nil
		inputs["logoUri"] = nil
		inputs["omitSecret"] = nil
		inputs["policyUri"] = nil
		inputs["postLogoutRedirectUris"] = nil
		inputs["profile"] = nil
		inputs["redirectUris"] = nil
		inputs["responseTypes"] = nil
		inputs["status"] = nil
		inputs["tokenEndpointAuthMethod"] = nil
		inputs["tosUri"] = nil
		inputs["type"] = nil
		inputs["users"] = nil
	} else {
		inputs["autoKeyRotation"] = args.AutoKeyRotation
		inputs["autoSubmitToolbar"] = args.AutoSubmitToolbar
		inputs["clientBasicSecret"] = args.ClientBasicSecret
		inputs["clientUri"] = args.ClientUri
		inputs["consentMethod"] = args.ConsentMethod
		inputs["customClientId"] = args.CustomClientId
		inputs["grantTypes"] = args.GrantTypes
		inputs["groups"] = args.Groups
		inputs["hideIos"] = args.HideIos
		inputs["hideWeb"] = args.HideWeb
		inputs["issuerMode"] = args.IssuerMode
		inputs["label"] = args.Label
		inputs["loginUri"] = args.LoginUri
		inputs["logoUri"] = args.LogoUri
		inputs["omitSecret"] = args.OmitSecret
		inputs["policyUri"] = args.PolicyUri
		inputs["postLogoutRedirectUris"] = args.PostLogoutRedirectUris
		inputs["profile"] = args.Profile
		inputs["redirectUris"] = args.RedirectUris
		inputs["responseTypes"] = args.ResponseTypes
		inputs["status"] = args.Status
		inputs["tokenEndpointAuthMethod"] = args.TokenEndpointAuthMethod
		inputs["tosUri"] = args.TosUri
		inputs["type"] = args.Type
		inputs["users"] = args.Users
	}
	inputs["clientId"] = nil
	inputs["clientSecret"] = nil
	inputs["name"] = nil
	inputs["signOnMode"] = nil
	s, err := ctx.RegisterResource("okta:deprecated/oauthApp:OauthApp", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &OauthApp{s: s}, nil
}

// GetOauthApp gets an existing OauthApp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOauthApp(ctx *pulumi.Context,
	name string, id pulumi.ID, state *OauthAppState, opts ...pulumi.ResourceOpt) (*OauthApp, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["autoKeyRotation"] = state.AutoKeyRotation
		inputs["autoSubmitToolbar"] = state.AutoSubmitToolbar
		inputs["clientBasicSecret"] = state.ClientBasicSecret
		inputs["clientId"] = state.ClientId
		inputs["clientSecret"] = state.ClientSecret
		inputs["clientUri"] = state.ClientUri
		inputs["consentMethod"] = state.ConsentMethod
		inputs["customClientId"] = state.CustomClientId
		inputs["grantTypes"] = state.GrantTypes
		inputs["groups"] = state.Groups
		inputs["hideIos"] = state.HideIos
		inputs["hideWeb"] = state.HideWeb
		inputs["issuerMode"] = state.IssuerMode
		inputs["label"] = state.Label
		inputs["loginUri"] = state.LoginUri
		inputs["logoUri"] = state.LogoUri
		inputs["name"] = state.Name
		inputs["omitSecret"] = state.OmitSecret
		inputs["policyUri"] = state.PolicyUri
		inputs["postLogoutRedirectUris"] = state.PostLogoutRedirectUris
		inputs["profile"] = state.Profile
		inputs["redirectUris"] = state.RedirectUris
		inputs["responseTypes"] = state.ResponseTypes
		inputs["signOnMode"] = state.SignOnMode
		inputs["status"] = state.Status
		inputs["tokenEndpointAuthMethod"] = state.TokenEndpointAuthMethod
		inputs["tosUri"] = state.TosUri
		inputs["type"] = state.Type
		inputs["users"] = state.Users
	}
	s, err := ctx.ReadResource("okta:deprecated/oauthApp:OauthApp", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &OauthApp{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *OauthApp) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *OauthApp) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Requested key rotation mode.
func (r *OauthApp) AutoKeyRotation() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["autoKeyRotation"])
}

// Display auto submit toolbar
func (r *OauthApp) AutoSubmitToolbar() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["autoSubmitToolbar"])
}

// OAuth client secret key, this can be set when token_endpoint_auth_method is client_secret_basic.
func (r *OauthApp) ClientBasicSecret() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clientBasicSecret"])
}

// OAuth client ID.
func (r *OauthApp) ClientId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clientId"])
}

// OAuth client secret key. This will be in plain text in your statefile unless you set omit_secret above.
func (r *OauthApp) ClientSecret() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clientSecret"])
}

// URI to a web page providing information about the client.
func (r *OauthApp) ClientUri() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clientUri"])
}

// *Early Access Property*. Indicates whether user consent is required or implicit. Valid values: REQUIRED, TRUSTED.
// Default value is TRUSTED
func (r *OauthApp) ConsentMethod() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["consentMethod"])
}

// This property allows you to set your client_id.
func (r *OauthApp) CustomClientId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["customClientId"])
}

// List of OAuth 2.0 grant types. Conditional validation params found here
// https://developer.okta.com/docs/api/resources/apps#credentials-settings-details. Defaults to minimum requirements per
// app type.
func (r *OauthApp) GrantTypes() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["grantTypes"])
}

// Groups associated with the application
func (r *OauthApp) Groups() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["groups"])
}

// Do not display application icon on mobile app
func (r *OauthApp) HideIos() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["hideIos"])
}

// Do not display application icon to users
func (r *OauthApp) HideWeb() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["hideWeb"])
}

// *Early Access Property*. Indicates whether the Okta Authorization Server uses the original Okta org domain URL or a
// custom domain URL as the issuer of ID token for this client.
func (r *OauthApp) IssuerMode() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["issuerMode"])
}

// Pretty name of app.
func (r *OauthApp) Label() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["label"])
}

// URI that initiates login.
func (r *OauthApp) LoginUri() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["loginUri"])
}

// URI that references a logo for the client.
func (r *OauthApp) LogoUri() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["logoUri"])
}

// name of app.
func (r *OauthApp) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// This tells the provider not to persist the application's secret to state. If this is ever changes from true => false
// your app will be recreated.
func (r *OauthApp) OmitSecret() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["omitSecret"])
}

// *Early Access Property*. URI to web page providing client policy document.
func (r *OauthApp) PolicyUri() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["policyUri"])
}

// List of URIs for redirection after logout
func (r *OauthApp) PostLogoutRedirectUris() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["postLogoutRedirectUris"])
}

// Custom JSON that represents an OAuth application's profile
func (r *OauthApp) Profile() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["profile"])
}

// List of URIs for use in the redirect-based flow. This is required for all application types except service. Note: see
// okta_app_oauth_redirect_uri for appending to this list in a decentralized way.
func (r *OauthApp) RedirectUris() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["redirectUris"])
}

// List of OAuth 2.0 response type strings.
func (r *OauthApp) ResponseTypes() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["responseTypes"])
}

// Sign on mode of application.
func (r *OauthApp) SignOnMode() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["signOnMode"])
}

// Status of application.
func (r *OauthApp) Status() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["status"])
}

// Requested authentication method for the token endpoint.
func (r *OauthApp) TokenEndpointAuthMethod() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["tokenEndpointAuthMethod"])
}

// *Early Access Property*. URI to web page providing client tos (terms of service).
func (r *OauthApp) TosUri() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["tosUri"])
}

// The type of client application.
func (r *OauthApp) Type() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["type"])
}

// Users associated with the application
func (r *OauthApp) Users() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["users"])
}

// Input properties used for looking up and filtering OauthApp resources.
type OauthAppState struct {
	// Requested key rotation mode.
	AutoKeyRotation interface{}
	// Display auto submit toolbar
	AutoSubmitToolbar interface{}
	// OAuth client secret key, this can be set when token_endpoint_auth_method is client_secret_basic.
	ClientBasicSecret interface{}
	// OAuth client ID.
	ClientId interface{}
	// OAuth client secret key. This will be in plain text in your statefile unless you set omit_secret above.
	ClientSecret interface{}
	// URI to a web page providing information about the client.
	ClientUri interface{}
	// *Early Access Property*. Indicates whether user consent is required or implicit. Valid values: REQUIRED, TRUSTED.
	// Default value is TRUSTED
	ConsentMethod interface{}
	// This property allows you to set your client_id.
	CustomClientId interface{}
	// List of OAuth 2.0 grant types. Conditional validation params found here
	// https://developer.okta.com/docs/api/resources/apps#credentials-settings-details. Defaults to minimum requirements per
	// app type.
	GrantTypes interface{}
	// Groups associated with the application
	Groups interface{}
	// Do not display application icon on mobile app
	HideIos interface{}
	// Do not display application icon to users
	HideWeb interface{}
	// *Early Access Property*. Indicates whether the Okta Authorization Server uses the original Okta org domain URL or a
	// custom domain URL as the issuer of ID token for this client.
	IssuerMode interface{}
	// Pretty name of app.
	Label interface{}
	// URI that initiates login.
	LoginUri interface{}
	// URI that references a logo for the client.
	LogoUri interface{}
	// name of app.
	Name interface{}
	// This tells the provider not to persist the application's secret to state. If this is ever changes from true => false
	// your app will be recreated.
	OmitSecret interface{}
	// *Early Access Property*. URI to web page providing client policy document.
	PolicyUri interface{}
	// List of URIs for redirection after logout
	PostLogoutRedirectUris interface{}
	// Custom JSON that represents an OAuth application's profile
	Profile interface{}
	// List of URIs for use in the redirect-based flow. This is required for all application types except service. Note: see
	// okta_app_oauth_redirect_uri for appending to this list in a decentralized way.
	RedirectUris interface{}
	// List of OAuth 2.0 response type strings.
	ResponseTypes interface{}
	// Sign on mode of application.
	SignOnMode interface{}
	// Status of application.
	Status interface{}
	// Requested authentication method for the token endpoint.
	TokenEndpointAuthMethod interface{}
	// *Early Access Property*. URI to web page providing client tos (terms of service).
	TosUri interface{}
	// The type of client application.
	Type interface{}
	// Users associated with the application
	Users interface{}
}

// The set of arguments for constructing a OauthApp resource.
type OauthAppArgs struct {
	// Requested key rotation mode.
	AutoKeyRotation interface{}
	// Display auto submit toolbar
	AutoSubmitToolbar interface{}
	// OAuth client secret key, this can be set when token_endpoint_auth_method is client_secret_basic.
	ClientBasicSecret interface{}
	// URI to a web page providing information about the client.
	ClientUri interface{}
	// *Early Access Property*. Indicates whether user consent is required or implicit. Valid values: REQUIRED, TRUSTED.
	// Default value is TRUSTED
	ConsentMethod interface{}
	// This property allows you to set your client_id.
	CustomClientId interface{}
	// List of OAuth 2.0 grant types. Conditional validation params found here
	// https://developer.okta.com/docs/api/resources/apps#credentials-settings-details. Defaults to minimum requirements per
	// app type.
	GrantTypes interface{}
	// Groups associated with the application
	Groups interface{}
	// Do not display application icon on mobile app
	HideIos interface{}
	// Do not display application icon to users
	HideWeb interface{}
	// *Early Access Property*. Indicates whether the Okta Authorization Server uses the original Okta org domain URL or a
	// custom domain URL as the issuer of ID token for this client.
	IssuerMode interface{}
	// Pretty name of app.
	Label interface{}
	// URI that initiates login.
	LoginUri interface{}
	// URI that references a logo for the client.
	LogoUri interface{}
	// This tells the provider not to persist the application's secret to state. If this is ever changes from true => false
	// your app will be recreated.
	OmitSecret interface{}
	// *Early Access Property*. URI to web page providing client policy document.
	PolicyUri interface{}
	// List of URIs for redirection after logout
	PostLogoutRedirectUris interface{}
	// Custom JSON that represents an OAuth application's profile
	Profile interface{}
	// List of URIs for use in the redirect-based flow. This is required for all application types except service. Note: see
	// okta_app_oauth_redirect_uri for appending to this list in a decentralized way.
	RedirectUris interface{}
	// List of OAuth 2.0 response type strings.
	ResponseTypes interface{}
	// Status of application.
	Status interface{}
	// Requested authentication method for the token endpoint.
	TokenEndpointAuthMethod interface{}
	// *Early Access Property*. URI to web page providing client tos (terms of service).
	TosUri interface{}
	// The type of client application.
	Type interface{}
	// Users associated with the application
	Users interface{}
}
