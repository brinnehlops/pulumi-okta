// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package deprecated

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type SignonPolicy struct {
	s *pulumi.ResourceState
}

// NewSignonPolicy registers a new resource with the given unique name, arguments, and options.
func NewSignonPolicy(ctx *pulumi.Context,
	name string, args *SignonPolicyArgs, opts ...pulumi.ResourceOpt) (*SignonPolicy, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["groupsIncludeds"] = nil
		inputs["name"] = nil
		inputs["priority"] = nil
		inputs["status"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["groupsIncludeds"] = args.GroupsIncludeds
		inputs["name"] = args.Name
		inputs["priority"] = args.Priority
		inputs["status"] = args.Status
	}
	s, err := ctx.RegisterResource("okta:deprecated/signonPolicy:SignonPolicy", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SignonPolicy{s: s}, nil
}

// GetSignonPolicy gets an existing SignonPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSignonPolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SignonPolicyState, opts ...pulumi.ResourceOpt) (*SignonPolicy, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["groupsIncludeds"] = state.GroupsIncludeds
		inputs["name"] = state.Name
		inputs["priority"] = state.Priority
		inputs["status"] = state.Status
	}
	s, err := ctx.ReadResource("okta:deprecated/signonPolicy:SignonPolicy", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SignonPolicy{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SignonPolicy) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SignonPolicy) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Policy Description
func (r *SignonPolicy) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// List of Group IDs to Include
func (r *SignonPolicy) GroupsIncludeds() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["groupsIncludeds"])
}

// Policy Name
func (r *SignonPolicy) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid
// priority is provided. API defaults it to the last/lowest if not there.
func (r *SignonPolicy) Priority() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["priority"])
}

// Policy Status: ACTIVE or INACTIVE.
func (r *SignonPolicy) Status() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["status"])
}

// Input properties used for looking up and filtering SignonPolicy resources.
type SignonPolicyState struct {
	// Policy Description
	Description interface{}
	// List of Group IDs to Include
	GroupsIncludeds interface{}
	// Policy Name
	Name interface{}
	// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid
	// priority is provided. API defaults it to the last/lowest if not there.
	Priority interface{}
	// Policy Status: ACTIVE or INACTIVE.
	Status interface{}
}

// The set of arguments for constructing a SignonPolicy resource.
type SignonPolicyArgs struct {
	// Policy Description
	Description interface{}
	// List of Group IDs to Include
	GroupsIncludeds interface{}
	// Policy Name
	Name interface{}
	// Policy Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an invalid
	// priority is provided. API defaults it to the last/lowest if not there.
	Priority interface{}
	// Policy Status: ACTIVE or INACTIVE.
	Status interface{}
}
