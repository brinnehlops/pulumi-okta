// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package deprecated

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type SamlApp struct {
	s *pulumi.ResourceState
}

// NewSamlApp registers a new resource with the given unique name, arguments, and options.
func NewSamlApp(ctx *pulumi.Context,
	name string, args *SamlAppArgs, opts ...pulumi.ResourceOpt) (*SamlApp, error) {
	if args == nil || args.Label == nil {
		return nil, errors.New("missing required argument 'Label'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accessibilityErrorRedirectUrl"] = nil
		inputs["accessibilityLoginRedirectUrl"] = nil
		inputs["accessibilitySelfService"] = nil
		inputs["appSettingsJson"] = nil
		inputs["assertionSigned"] = nil
		inputs["attributeStatements"] = nil
		inputs["audience"] = nil
		inputs["authnContextClassRef"] = nil
		inputs["autoSubmitToolbar"] = nil
		inputs["defaultRelayState"] = nil
		inputs["destination"] = nil
		inputs["digestAlgorithm"] = nil
		inputs["features"] = nil
		inputs["groups"] = nil
		inputs["hideIos"] = nil
		inputs["hideWeb"] = nil
		inputs["honorForceAuthn"] = nil
		inputs["idpIssuer"] = nil
		inputs["keyName"] = nil
		inputs["keyYearsValid"] = nil
		inputs["label"] = nil
		inputs["preconfiguredApp"] = nil
		inputs["recipient"] = nil
		inputs["requestCompressed"] = nil
		inputs["responseSigned"] = nil
		inputs["signatureAlgorithm"] = nil
		inputs["spIssuer"] = nil
		inputs["ssoUrl"] = nil
		inputs["status"] = nil
		inputs["subjectNameIdFormat"] = nil
		inputs["subjectNameIdTemplate"] = nil
		inputs["userNameTemplate"] = nil
		inputs["userNameTemplateSuffix"] = nil
		inputs["userNameTemplateType"] = nil
		inputs["users"] = nil
	} else {
		inputs["accessibilityErrorRedirectUrl"] = args.AccessibilityErrorRedirectUrl
		inputs["accessibilityLoginRedirectUrl"] = args.AccessibilityLoginRedirectUrl
		inputs["accessibilitySelfService"] = args.AccessibilitySelfService
		inputs["appSettingsJson"] = args.AppSettingsJson
		inputs["assertionSigned"] = args.AssertionSigned
		inputs["attributeStatements"] = args.AttributeStatements
		inputs["audience"] = args.Audience
		inputs["authnContextClassRef"] = args.AuthnContextClassRef
		inputs["autoSubmitToolbar"] = args.AutoSubmitToolbar
		inputs["defaultRelayState"] = args.DefaultRelayState
		inputs["destination"] = args.Destination
		inputs["digestAlgorithm"] = args.DigestAlgorithm
		inputs["features"] = args.Features
		inputs["groups"] = args.Groups
		inputs["hideIos"] = args.HideIos
		inputs["hideWeb"] = args.HideWeb
		inputs["honorForceAuthn"] = args.HonorForceAuthn
		inputs["idpIssuer"] = args.IdpIssuer
		inputs["keyName"] = args.KeyName
		inputs["keyYearsValid"] = args.KeyYearsValid
		inputs["label"] = args.Label
		inputs["preconfiguredApp"] = args.PreconfiguredApp
		inputs["recipient"] = args.Recipient
		inputs["requestCompressed"] = args.RequestCompressed
		inputs["responseSigned"] = args.ResponseSigned
		inputs["signatureAlgorithm"] = args.SignatureAlgorithm
		inputs["spIssuer"] = args.SpIssuer
		inputs["ssoUrl"] = args.SsoUrl
		inputs["status"] = args.Status
		inputs["subjectNameIdFormat"] = args.SubjectNameIdFormat
		inputs["subjectNameIdTemplate"] = args.SubjectNameIdTemplate
		inputs["userNameTemplate"] = args.UserNameTemplate
		inputs["userNameTemplateSuffix"] = args.UserNameTemplateSuffix
		inputs["userNameTemplateType"] = args.UserNameTemplateType
		inputs["users"] = args.Users
	}
	inputs["certificate"] = nil
	inputs["entityKey"] = nil
	inputs["entityUrl"] = nil
	inputs["httpPostBinding"] = nil
	inputs["httpRedirectBinding"] = nil
	inputs["keyId"] = nil
	inputs["metadata"] = nil
	inputs["name"] = nil
	inputs["signOnMode"] = nil
	s, err := ctx.RegisterResource("okta:deprecated/samlApp:SamlApp", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SamlApp{s: s}, nil
}

// GetSamlApp gets an existing SamlApp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSamlApp(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SamlAppState, opts ...pulumi.ResourceOpt) (*SamlApp, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessibilityErrorRedirectUrl"] = state.AccessibilityErrorRedirectUrl
		inputs["accessibilityLoginRedirectUrl"] = state.AccessibilityLoginRedirectUrl
		inputs["accessibilitySelfService"] = state.AccessibilitySelfService
		inputs["appSettingsJson"] = state.AppSettingsJson
		inputs["assertionSigned"] = state.AssertionSigned
		inputs["attributeStatements"] = state.AttributeStatements
		inputs["audience"] = state.Audience
		inputs["authnContextClassRef"] = state.AuthnContextClassRef
		inputs["autoSubmitToolbar"] = state.AutoSubmitToolbar
		inputs["certificate"] = state.Certificate
		inputs["defaultRelayState"] = state.DefaultRelayState
		inputs["destination"] = state.Destination
		inputs["digestAlgorithm"] = state.DigestAlgorithm
		inputs["entityKey"] = state.EntityKey
		inputs["entityUrl"] = state.EntityUrl
		inputs["features"] = state.Features
		inputs["groups"] = state.Groups
		inputs["hideIos"] = state.HideIos
		inputs["hideWeb"] = state.HideWeb
		inputs["honorForceAuthn"] = state.HonorForceAuthn
		inputs["httpPostBinding"] = state.HttpPostBinding
		inputs["httpRedirectBinding"] = state.HttpRedirectBinding
		inputs["idpIssuer"] = state.IdpIssuer
		inputs["keyId"] = state.KeyId
		inputs["keyName"] = state.KeyName
		inputs["keyYearsValid"] = state.KeyYearsValid
		inputs["label"] = state.Label
		inputs["metadata"] = state.Metadata
		inputs["name"] = state.Name
		inputs["preconfiguredApp"] = state.PreconfiguredApp
		inputs["recipient"] = state.Recipient
		inputs["requestCompressed"] = state.RequestCompressed
		inputs["responseSigned"] = state.ResponseSigned
		inputs["signOnMode"] = state.SignOnMode
		inputs["signatureAlgorithm"] = state.SignatureAlgorithm
		inputs["spIssuer"] = state.SpIssuer
		inputs["ssoUrl"] = state.SsoUrl
		inputs["status"] = state.Status
		inputs["subjectNameIdFormat"] = state.SubjectNameIdFormat
		inputs["subjectNameIdTemplate"] = state.SubjectNameIdTemplate
		inputs["userNameTemplate"] = state.UserNameTemplate
		inputs["userNameTemplateSuffix"] = state.UserNameTemplateSuffix
		inputs["userNameTemplateType"] = state.UserNameTemplateType
		inputs["users"] = state.Users
	}
	s, err := ctx.ReadResource("okta:deprecated/samlApp:SamlApp", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SamlApp{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SamlApp) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SamlApp) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Custom error page URL
func (r *SamlApp) AccessibilityErrorRedirectUrl() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["accessibilityErrorRedirectUrl"])
}

// Custom login page URL
func (r *SamlApp) AccessibilityLoginRedirectUrl() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["accessibilityLoginRedirectUrl"])
}

// Enable self service
func (r *SamlApp) AccessibilitySelfService() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["accessibilitySelfService"])
}

// Application settings in JSON format
func (r *SamlApp) AppSettingsJson() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["appSettingsJson"])
}

// Determines whether the SAML assertion is digitally signed
func (r *SamlApp) AssertionSigned() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["assertionSigned"])
}

func (r *SamlApp) AttributeStatements() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["attributeStatements"])
}

// Audience Restriction
func (r *SamlApp) Audience() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["audience"])
}

// Identifies the SAML authentication context class for the assertionâ€™s authentication statement
func (r *SamlApp) AuthnContextClassRef() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["authnContextClassRef"])
}

// Display auto submit toolbar
func (r *SamlApp) AutoSubmitToolbar() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["autoSubmitToolbar"])
}

// cert from SAML XML metadata payload
func (r *SamlApp) Certificate() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["certificate"])
}

// Identifies a specific application resource in an IDP initiated SSO scenario.
func (r *SamlApp) DefaultRelayState() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["defaultRelayState"])
}

// Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
func (r *SamlApp) Destination() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["destination"])
}

// Determines the digest algorithm used to digitally sign the SAML assertion and response
func (r *SamlApp) DigestAlgorithm() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["digestAlgorithm"])
}

// Entity ID, the ID portion of the entity_url
func (r *SamlApp) EntityKey() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["entityKey"])
}

// Entity URL for instance http://www.okta.com/exk1fcia6d6EMsf331d8
func (r *SamlApp) EntityUrl() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["entityUrl"])
}

// features to enable
func (r *SamlApp) Features() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["features"])
}

// Groups associated with the application
func (r *SamlApp) Groups() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["groups"])
}

// Do not display application icon on mobile app
func (r *SamlApp) HideIos() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["hideIos"])
}

// Do not display application icon to users
func (r *SamlApp) HideWeb() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["hideWeb"])
}

// Prompt user to re-authenticate if SP asks for it
func (r *SamlApp) HonorForceAuthn() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["honorForceAuthn"])
}

// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.
func (r *SamlApp) HttpPostBinding() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["httpPostBinding"])
}

// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.
func (r *SamlApp) HttpRedirectBinding() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["httpRedirectBinding"])
}

// SAML issuer ID
func (r *SamlApp) IdpIssuer() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["idpIssuer"])
}

// Certificate ID
func (r *SamlApp) KeyId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["keyId"])
}

// Certificate name. This modulates the rotation of keys. New name == new key.
func (r *SamlApp) KeyName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["keyName"])
}

// Number of years the certificate is valid.
func (r *SamlApp) KeyYearsValid() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["keyYearsValid"])
}

// Pretty name of app.
func (r *SamlApp) Label() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["label"])
}

// SAML xml metadata payload
func (r *SamlApp) Metadata() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["metadata"])
}

// name of app.
func (r *SamlApp) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Name of preexisting SAML application. For instance 'slack'
func (r *SamlApp) PreconfiguredApp() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["preconfiguredApp"])
}

// The location where the app may present the SAML assertion
func (r *SamlApp) Recipient() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["recipient"])
}

// Denotes whether the request is compressed or not.
func (r *SamlApp) RequestCompressed() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["requestCompressed"])
}

// Determines whether the SAML auth response message is digitally signed
func (r *SamlApp) ResponseSigned() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["responseSigned"])
}

// Sign on mode of application.
func (r *SamlApp) SignOnMode() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["signOnMode"])
}

// Signature algorithm used ot digitally sign the assertion and response
func (r *SamlApp) SignatureAlgorithm() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["signatureAlgorithm"])
}

// SAML SP issuer ID
func (r *SamlApp) SpIssuer() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["spIssuer"])
}

// Single Sign On URL
func (r *SamlApp) SsoUrl() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["ssoUrl"])
}

// Status of application.
func (r *SamlApp) Status() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["status"])
}

// Identifies the SAML processing rules.
func (r *SamlApp) SubjectNameIdFormat() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["subjectNameIdFormat"])
}

// Template for app user's username when a user is assigned to the app
func (r *SamlApp) SubjectNameIdTemplate() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["subjectNameIdTemplate"])
}

// Username template
func (r *SamlApp) UserNameTemplate() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["userNameTemplate"])
}

// Username template suffix
func (r *SamlApp) UserNameTemplateSuffix() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["userNameTemplateSuffix"])
}

// Username template type
func (r *SamlApp) UserNameTemplateType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["userNameTemplateType"])
}

// Users associated with the application
func (r *SamlApp) Users() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["users"])
}

// Input properties used for looking up and filtering SamlApp resources.
type SamlAppState struct {
	// Custom error page URL
	AccessibilityErrorRedirectUrl interface{}
	// Custom login page URL
	AccessibilityLoginRedirectUrl interface{}
	// Enable self service
	AccessibilitySelfService interface{}
	// Application settings in JSON format
	AppSettingsJson interface{}
	// Determines whether the SAML assertion is digitally signed
	AssertionSigned interface{}
	AttributeStatements interface{}
	// Audience Restriction
	Audience interface{}
	// Identifies the SAML authentication context class for the assertionâ€™s authentication statement
	AuthnContextClassRef interface{}
	// Display auto submit toolbar
	AutoSubmitToolbar interface{}
	// cert from SAML XML metadata payload
	Certificate interface{}
	// Identifies a specific application resource in an IDP initiated SSO scenario.
	DefaultRelayState interface{}
	// Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
	Destination interface{}
	// Determines the digest algorithm used to digitally sign the SAML assertion and response
	DigestAlgorithm interface{}
	// Entity ID, the ID portion of the entity_url
	EntityKey interface{}
	// Entity URL for instance http://www.okta.com/exk1fcia6d6EMsf331d8
	EntityUrl interface{}
	// features to enable
	Features interface{}
	// Groups associated with the application
	Groups interface{}
	// Do not display application icon on mobile app
	HideIos interface{}
	// Do not display application icon to users
	HideWeb interface{}
	// Prompt user to re-authenticate if SP asks for it
	HonorForceAuthn interface{}
	// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post location from the SAML metadata.
	HttpPostBinding interface{}
	// urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect location from the SAML metadata.
	HttpRedirectBinding interface{}
	// SAML issuer ID
	IdpIssuer interface{}
	// Certificate ID
	KeyId interface{}
	// Certificate name. This modulates the rotation of keys. New name == new key.
	KeyName interface{}
	// Number of years the certificate is valid.
	KeyYearsValid interface{}
	// Pretty name of app.
	Label interface{}
	// SAML xml metadata payload
	Metadata interface{}
	// name of app.
	Name interface{}
	// Name of preexisting SAML application. For instance 'slack'
	PreconfiguredApp interface{}
	// The location where the app may present the SAML assertion
	Recipient interface{}
	// Denotes whether the request is compressed or not.
	RequestCompressed interface{}
	// Determines whether the SAML auth response message is digitally signed
	ResponseSigned interface{}
	// Sign on mode of application.
	SignOnMode interface{}
	// Signature algorithm used ot digitally sign the assertion and response
	SignatureAlgorithm interface{}
	// SAML SP issuer ID
	SpIssuer interface{}
	// Single Sign On URL
	SsoUrl interface{}
	// Status of application.
	Status interface{}
	// Identifies the SAML processing rules.
	SubjectNameIdFormat interface{}
	// Template for app user's username when a user is assigned to the app
	SubjectNameIdTemplate interface{}
	// Username template
	UserNameTemplate interface{}
	// Username template suffix
	UserNameTemplateSuffix interface{}
	// Username template type
	UserNameTemplateType interface{}
	// Users associated with the application
	Users interface{}
}

// The set of arguments for constructing a SamlApp resource.
type SamlAppArgs struct {
	// Custom error page URL
	AccessibilityErrorRedirectUrl interface{}
	// Custom login page URL
	AccessibilityLoginRedirectUrl interface{}
	// Enable self service
	AccessibilitySelfService interface{}
	// Application settings in JSON format
	AppSettingsJson interface{}
	// Determines whether the SAML assertion is digitally signed
	AssertionSigned interface{}
	AttributeStatements interface{}
	// Audience Restriction
	Audience interface{}
	// Identifies the SAML authentication context class for the assertionâ€™s authentication statement
	AuthnContextClassRef interface{}
	// Display auto submit toolbar
	AutoSubmitToolbar interface{}
	// Identifies a specific application resource in an IDP initiated SSO scenario.
	DefaultRelayState interface{}
	// Identifies the location where the SAML response is intended to be sent inside of the SAML assertion
	Destination interface{}
	// Determines the digest algorithm used to digitally sign the SAML assertion and response
	DigestAlgorithm interface{}
	// features to enable
	Features interface{}
	// Groups associated with the application
	Groups interface{}
	// Do not display application icon on mobile app
	HideIos interface{}
	// Do not display application icon to users
	HideWeb interface{}
	// Prompt user to re-authenticate if SP asks for it
	HonorForceAuthn interface{}
	// SAML issuer ID
	IdpIssuer interface{}
	// Certificate name. This modulates the rotation of keys. New name == new key.
	KeyName interface{}
	// Number of years the certificate is valid.
	KeyYearsValid interface{}
	// Pretty name of app.
	Label interface{}
	// Name of preexisting SAML application. For instance 'slack'
	PreconfiguredApp interface{}
	// The location where the app may present the SAML assertion
	Recipient interface{}
	// Denotes whether the request is compressed or not.
	RequestCompressed interface{}
	// Determines whether the SAML auth response message is digitally signed
	ResponseSigned interface{}
	// Signature algorithm used ot digitally sign the assertion and response
	SignatureAlgorithm interface{}
	// SAML SP issuer ID
	SpIssuer interface{}
	// Single Sign On URL
	SsoUrl interface{}
	// Status of application.
	Status interface{}
	// Identifies the SAML processing rules.
	SubjectNameIdFormat interface{}
	// Template for app user's username when a user is assigned to the app
	SubjectNameIdTemplate interface{}
	// Username template
	UserNameTemplate interface{}
	// Username template suffix
	UserNameTemplateSuffix interface{}
	// Username template type
	UserNameTemplateType interface{}
	// Users associated with the application
	Users interface{}
}
