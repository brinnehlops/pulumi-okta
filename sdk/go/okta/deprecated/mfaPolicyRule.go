// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package deprecated

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type MfaPolicyRule struct {
	s *pulumi.ResourceState
}

// NewMfaPolicyRule registers a new resource with the given unique name, arguments, and options.
func NewMfaPolicyRule(ctx *pulumi.Context,
	name string, args *MfaPolicyRuleArgs, opts ...pulumi.ResourceOpt) (*MfaPolicyRule, error) {
	if args == nil || args.Policyid == nil {
		return nil, errors.New("missing required argument 'Policyid'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["enroll"] = nil
		inputs["name"] = nil
		inputs["networkConnection"] = nil
		inputs["networkExcludes"] = nil
		inputs["networkIncludes"] = nil
		inputs["policyid"] = nil
		inputs["priority"] = nil
		inputs["status"] = nil
		inputs["usersExcludeds"] = nil
	} else {
		inputs["enroll"] = args.Enroll
		inputs["name"] = args.Name
		inputs["networkConnection"] = args.NetworkConnection
		inputs["networkExcludes"] = args.NetworkExcludes
		inputs["networkIncludes"] = args.NetworkIncludes
		inputs["policyid"] = args.Policyid
		inputs["priority"] = args.Priority
		inputs["status"] = args.Status
		inputs["usersExcludeds"] = args.UsersExcludeds
	}
	s, err := ctx.RegisterResource("okta:deprecated/mfaPolicyRule:MfaPolicyRule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &MfaPolicyRule{s: s}, nil
}

// GetMfaPolicyRule gets an existing MfaPolicyRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMfaPolicyRule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *MfaPolicyRuleState, opts ...pulumi.ResourceOpt) (*MfaPolicyRule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["enroll"] = state.Enroll
		inputs["name"] = state.Name
		inputs["networkConnection"] = state.NetworkConnection
		inputs["networkExcludes"] = state.NetworkExcludes
		inputs["networkIncludes"] = state.NetworkIncludes
		inputs["policyid"] = state.Policyid
		inputs["priority"] = state.Priority
		inputs["status"] = state.Status
		inputs["usersExcludeds"] = state.UsersExcludeds
	}
	s, err := ctx.ReadResource("okta:deprecated/mfaPolicyRule:MfaPolicyRule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &MfaPolicyRule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *MfaPolicyRule) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *MfaPolicyRule) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Should the user be enrolled the first time they LOGIN, the next time they are CHALLENGEd, or NEVER?
func (r *MfaPolicyRule) Enroll() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["enroll"])
}

// Policy Rule Name
func (r *MfaPolicyRule) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Network selection mode: ANYWHERE, ZONE, ON_NETWORK, or OFF_NETWORK.
func (r *MfaPolicyRule) NetworkConnection() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["networkConnection"])
}

// The zones to exclude
func (r *MfaPolicyRule) NetworkExcludes() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["networkExcludes"])
}

// The zones to include
func (r *MfaPolicyRule) NetworkIncludes() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["networkIncludes"])
}

// Policy ID of the Rule
func (r *MfaPolicyRule) Policyid() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["policyid"])
}

// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an
// invalid priority is provided. API defaults it to the last/lowest if not there.
func (r *MfaPolicyRule) Priority() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["priority"])
}

// Policy Rule Status: ACTIVE or INACTIVE.
func (r *MfaPolicyRule) Status() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["status"])
}

// Set of User IDs to Exclude
func (r *MfaPolicyRule) UsersExcludeds() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["usersExcludeds"])
}

// Input properties used for looking up and filtering MfaPolicyRule resources.
type MfaPolicyRuleState struct {
	// Should the user be enrolled the first time they LOGIN, the next time they are CHALLENGEd, or NEVER?
	Enroll interface{}
	// Policy Rule Name
	Name interface{}
	// Network selection mode: ANYWHERE, ZONE, ON_NETWORK, or OFF_NETWORK.
	NetworkConnection interface{}
	// The zones to exclude
	NetworkExcludes interface{}
	// The zones to include
	NetworkIncludes interface{}
	// Policy ID of the Rule
	Policyid interface{}
	// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an
	// invalid priority is provided. API defaults it to the last/lowest if not there.
	Priority interface{}
	// Policy Rule Status: ACTIVE or INACTIVE.
	Status interface{}
	// Set of User IDs to Exclude
	UsersExcludeds interface{}
}

// The set of arguments for constructing a MfaPolicyRule resource.
type MfaPolicyRuleArgs struct {
	// Should the user be enrolled the first time they LOGIN, the next time they are CHALLENGEd, or NEVER?
	Enroll interface{}
	// Policy Rule Name
	Name interface{}
	// Network selection mode: ANYWHERE, ZONE, ON_NETWORK, or OFF_NETWORK.
	NetworkConnection interface{}
	// The zones to exclude
	NetworkExcludes interface{}
	// The zones to include
	NetworkIncludes interface{}
	// Policy ID of the Rule
	Policyid interface{}
	// Policy Rule Priority, this attribute can be set to a valid priority. To avoid endless diff situation we error if an
	// invalid priority is provided. API defaults it to the last/lowest if not there.
	Priority interface{}
	// Policy Rule Status: ACTIVE or INACTIVE.
	Status interface{}
	// Set of User IDs to Exclude
	UsersExcludeds interface{}
}
