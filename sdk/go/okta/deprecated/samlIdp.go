// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package deprecated

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type SamlIdp struct {
	s *pulumi.ResourceState
}

// NewSamlIdp registers a new resource with the given unique name, arguments, and options.
func NewSamlIdp(ctx *pulumi.Context,
	name string, args *SamlIdpArgs, opts ...pulumi.ResourceOpt) (*SamlIdp, error) {
	if args == nil || args.AcsBinding == nil {
		return nil, errors.New("missing required argument 'AcsBinding'")
	}
	if args == nil || args.Issuer == nil {
		return nil, errors.New("missing required argument 'Issuer'")
	}
	if args == nil || args.Kid == nil {
		return nil, errors.New("missing required argument 'Kid'")
	}
	if args == nil || args.SsoUrl == nil {
		return nil, errors.New("missing required argument 'SsoUrl'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accountLinkAction"] = nil
		inputs["accountLinkGroupIncludes"] = nil
		inputs["acsBinding"] = nil
		inputs["acsType"] = nil
		inputs["deprovisionedAction"] = nil
		inputs["groupsAction"] = nil
		inputs["groupsAssignments"] = nil
		inputs["groupsAttribute"] = nil
		inputs["groupsFilters"] = nil
		inputs["issuer"] = nil
		inputs["issuerMode"] = nil
		inputs["kid"] = nil
		inputs["name"] = nil
		inputs["nameFormat"] = nil
		inputs["profileMaster"] = nil
		inputs["provisioningAction"] = nil
		inputs["requestSignatureAlgorithm"] = nil
		inputs["requestSignatureScope"] = nil
		inputs["responseSignatureAlgorithm"] = nil
		inputs["responseSignatureScope"] = nil
		inputs["ssoBinding"] = nil
		inputs["ssoDestination"] = nil
		inputs["ssoUrl"] = nil
		inputs["status"] = nil
		inputs["subjectFilter"] = nil
		inputs["subjectFormats"] = nil
		inputs["subjectMatchAttribute"] = nil
		inputs["subjectMatchType"] = nil
		inputs["suspendedAction"] = nil
		inputs["usernameTemplate"] = nil
	} else {
		inputs["accountLinkAction"] = args.AccountLinkAction
		inputs["accountLinkGroupIncludes"] = args.AccountLinkGroupIncludes
		inputs["acsBinding"] = args.AcsBinding
		inputs["acsType"] = args.AcsType
		inputs["deprovisionedAction"] = args.DeprovisionedAction
		inputs["groupsAction"] = args.GroupsAction
		inputs["groupsAssignments"] = args.GroupsAssignments
		inputs["groupsAttribute"] = args.GroupsAttribute
		inputs["groupsFilters"] = args.GroupsFilters
		inputs["issuer"] = args.Issuer
		inputs["issuerMode"] = args.IssuerMode
		inputs["kid"] = args.Kid
		inputs["name"] = args.Name
		inputs["nameFormat"] = args.NameFormat
		inputs["profileMaster"] = args.ProfileMaster
		inputs["provisioningAction"] = args.ProvisioningAction
		inputs["requestSignatureAlgorithm"] = args.RequestSignatureAlgorithm
		inputs["requestSignatureScope"] = args.RequestSignatureScope
		inputs["responseSignatureAlgorithm"] = args.ResponseSignatureAlgorithm
		inputs["responseSignatureScope"] = args.ResponseSignatureScope
		inputs["ssoBinding"] = args.SsoBinding
		inputs["ssoDestination"] = args.SsoDestination
		inputs["ssoUrl"] = args.SsoUrl
		inputs["status"] = args.Status
		inputs["subjectFilter"] = args.SubjectFilter
		inputs["subjectFormats"] = args.SubjectFormats
		inputs["subjectMatchAttribute"] = args.SubjectMatchAttribute
		inputs["subjectMatchType"] = args.SubjectMatchType
		inputs["suspendedAction"] = args.SuspendedAction
		inputs["usernameTemplate"] = args.UsernameTemplate
	}
	inputs["audience"] = nil
	inputs["type"] = nil
	s, err := ctx.RegisterResource("okta:deprecated/samlIdp:SamlIdp", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SamlIdp{s: s}, nil
}

// GetSamlIdp gets an existing SamlIdp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSamlIdp(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SamlIdpState, opts ...pulumi.ResourceOpt) (*SamlIdp, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accountLinkAction"] = state.AccountLinkAction
		inputs["accountLinkGroupIncludes"] = state.AccountLinkGroupIncludes
		inputs["acsBinding"] = state.AcsBinding
		inputs["acsType"] = state.AcsType
		inputs["audience"] = state.Audience
		inputs["deprovisionedAction"] = state.DeprovisionedAction
		inputs["groupsAction"] = state.GroupsAction
		inputs["groupsAssignments"] = state.GroupsAssignments
		inputs["groupsAttribute"] = state.GroupsAttribute
		inputs["groupsFilters"] = state.GroupsFilters
		inputs["issuer"] = state.Issuer
		inputs["issuerMode"] = state.IssuerMode
		inputs["kid"] = state.Kid
		inputs["name"] = state.Name
		inputs["nameFormat"] = state.NameFormat
		inputs["profileMaster"] = state.ProfileMaster
		inputs["provisioningAction"] = state.ProvisioningAction
		inputs["requestSignatureAlgorithm"] = state.RequestSignatureAlgorithm
		inputs["requestSignatureScope"] = state.RequestSignatureScope
		inputs["responseSignatureAlgorithm"] = state.ResponseSignatureAlgorithm
		inputs["responseSignatureScope"] = state.ResponseSignatureScope
		inputs["ssoBinding"] = state.SsoBinding
		inputs["ssoDestination"] = state.SsoDestination
		inputs["ssoUrl"] = state.SsoUrl
		inputs["status"] = state.Status
		inputs["subjectFilter"] = state.SubjectFilter
		inputs["subjectFormats"] = state.SubjectFormats
		inputs["subjectMatchAttribute"] = state.SubjectMatchAttribute
		inputs["subjectMatchType"] = state.SubjectMatchType
		inputs["suspendedAction"] = state.SuspendedAction
		inputs["type"] = state.Type
		inputs["usernameTemplate"] = state.UsernameTemplate
	}
	s, err := ctx.ReadResource("okta:deprecated/samlIdp:SamlIdp", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SamlIdp{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SamlIdp) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SamlIdp) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *SamlIdp) AccountLinkAction() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["accountLinkAction"])
}

func (r *SamlIdp) AccountLinkGroupIncludes() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["accountLinkGroupIncludes"])
}

func (r *SamlIdp) AcsBinding() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["acsBinding"])
}

func (r *SamlIdp) AcsType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["acsType"])
}

func (r *SamlIdp) Audience() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["audience"])
}

func (r *SamlIdp) DeprovisionedAction() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["deprovisionedAction"])
}

func (r *SamlIdp) GroupsAction() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["groupsAction"])
}

func (r *SamlIdp) GroupsAssignments() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["groupsAssignments"])
}

func (r *SamlIdp) GroupsAttribute() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["groupsAttribute"])
}

func (r *SamlIdp) GroupsFilters() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["groupsFilters"])
}

func (r *SamlIdp) Issuer() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["issuer"])
}

// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
func (r *SamlIdp) IssuerMode() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["issuerMode"])
}

func (r *SamlIdp) Kid() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["kid"])
}

// name of idp
func (r *SamlIdp) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *SamlIdp) NameFormat() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["nameFormat"])
}

func (r *SamlIdp) ProfileMaster() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["profileMaster"])
}

func (r *SamlIdp) ProvisioningAction() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["provisioningAction"])
}

// algorithm to use to sign requests
func (r *SamlIdp) RequestSignatureAlgorithm() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["requestSignatureAlgorithm"])
}

// algorithm to use to sign response
func (r *SamlIdp) RequestSignatureScope() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["requestSignatureScope"])
}

// algorithm to use to sign requests
func (r *SamlIdp) ResponseSignatureAlgorithm() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["responseSignatureAlgorithm"])
}

// algorithm to use to sign response
func (r *SamlIdp) ResponseSignatureScope() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["responseSignatureScope"])
}

func (r *SamlIdp) SsoBinding() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ssoBinding"])
}

func (r *SamlIdp) SsoDestination() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ssoDestination"])
}

func (r *SamlIdp) SsoUrl() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ssoUrl"])
}

func (r *SamlIdp) Status() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["status"])
}

func (r *SamlIdp) SubjectFilter() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["subjectFilter"])
}

func (r *SamlIdp) SubjectFormats() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["subjectFormats"])
}

func (r *SamlIdp) SubjectMatchAttribute() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["subjectMatchAttribute"])
}

func (r *SamlIdp) SubjectMatchType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["subjectMatchType"])
}

func (r *SamlIdp) SuspendedAction() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["suspendedAction"])
}

func (r *SamlIdp) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

func (r *SamlIdp) UsernameTemplate() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["usernameTemplate"])
}

// Input properties used for looking up and filtering SamlIdp resources.
type SamlIdpState struct {
	AccountLinkAction interface{}
	AccountLinkGroupIncludes interface{}
	AcsBinding interface{}
	AcsType interface{}
	Audience interface{}
	DeprovisionedAction interface{}
	GroupsAction interface{}
	GroupsAssignments interface{}
	GroupsAttribute interface{}
	GroupsFilters interface{}
	Issuer interface{}
	// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
	IssuerMode interface{}
	Kid interface{}
	// name of idp
	Name interface{}
	NameFormat interface{}
	ProfileMaster interface{}
	ProvisioningAction interface{}
	// algorithm to use to sign requests
	RequestSignatureAlgorithm interface{}
	// algorithm to use to sign response
	RequestSignatureScope interface{}
	// algorithm to use to sign requests
	ResponseSignatureAlgorithm interface{}
	// algorithm to use to sign response
	ResponseSignatureScope interface{}
	SsoBinding interface{}
	SsoDestination interface{}
	SsoUrl interface{}
	Status interface{}
	SubjectFilter interface{}
	SubjectFormats interface{}
	SubjectMatchAttribute interface{}
	SubjectMatchType interface{}
	SuspendedAction interface{}
	Type interface{}
	UsernameTemplate interface{}
}

// The set of arguments for constructing a SamlIdp resource.
type SamlIdpArgs struct {
	AccountLinkAction interface{}
	AccountLinkGroupIncludes interface{}
	AcsBinding interface{}
	AcsType interface{}
	DeprovisionedAction interface{}
	GroupsAction interface{}
	GroupsAssignments interface{}
	GroupsAttribute interface{}
	GroupsFilters interface{}
	Issuer interface{}
	// Indicates whether Okta uses the original Okta org domain URL, or a custom domain URL
	IssuerMode interface{}
	Kid interface{}
	// name of idp
	Name interface{}
	NameFormat interface{}
	ProfileMaster interface{}
	ProvisioningAction interface{}
	// algorithm to use to sign requests
	RequestSignatureAlgorithm interface{}
	// algorithm to use to sign response
	RequestSignatureScope interface{}
	// algorithm to use to sign requests
	ResponseSignatureAlgorithm interface{}
	// algorithm to use to sign response
	ResponseSignatureScope interface{}
	SsoBinding interface{}
	SsoDestination interface{}
	SsoUrl interface{}
	Status interface{}
	SubjectFilter interface{}
	SubjectFormats interface{}
	SubjectMatchAttribute interface{}
	SubjectMatchType interface{}
	SuspendedAction interface{}
	UsernameTemplate interface{}
}
